// Code generated by go-bindata.
// sources:
// artifacts/backup-crd.yaml
// artifacts/backup-cronjob.yaml
// artifacts/backup-pvc.yaml
// artifacts/mysql-configmap.yaml
// artifacts/mysql-crd.yaml
// artifacts/mysql-service-read.yaml
// artifacts/mysql-service.yaml
// artifacts/mysql-statefulset.yaml
// DO NOT EDIT!

package artifacts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _artifactsBackupCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\x85\xbf\x20\x68\x3b\x94\x12\xe8\x38\x90\x00\x89\xde\x9b\x35\x8b\xb5\x49\x1c\x62\x67\xc5\xfd\x3d\xda\x9c\x28\x8e\x86\x72\x3c\x1e\xbd\xb1\xb1\xf2\x3b\x35\x65\x29\x01\xb0\x32\x7d\x1b\x95\x43\xa9\xdf\x6e\xd5\xb3\xdc\xec\xd3\x4c\x86\x93\xdb\xb8\x2c\x01\xee\xbb\x9a\xe4\x57\x52\xe9\x2d\xd2\x03\x7d\x70\x61\x63\x29\x2e\x93\xe1\x82\x86\xc1\x01\x14\xcc\x14\x20\x9f\xf5\x2b\xcd\x18\xb7\x5e\xd5\xc7\xe6\x87\x96\x4a\x0d\x4d\x9a\x5f\x9b\x25\xbf\xb2\x7d\xf6\xd9\x47\xc9\x4e\x2b\xc5\x23\xbb\x36\xe9\x35\xc0\xbf\xfb\x17\x8a\x1e\x11\x80\x4b\xb7\xa7\xf3\xdb\xcb\xe9\x6e\x00\xc7\x34\xb1\xda\xe3\x5f\xe7\xc4\x6a\xc3\x55\x2e\x6b\x4f\xd8\xae\x8a\x0e\xa7\xa6\xde\x30\x5d\x1f\xe0\x00\x34\x4a\xa5\x00\xcf\x07\xb6\x62\xa4\xc5\x01\xec\xbf\xaf\xdb\x27\xf7\x13\x00\x00\xff\xff\xe5\xf5\xf0\x5c\x4a\x01\x00\x00")

func artifactsBackupCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupCrdYaml,
		"artifacts/backup-crd.yaml",
	)
}

func artifactsBackupCrdYaml() (*asset, error) {
	bytes, err := artifactsBackupCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backup-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupCronjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\xf9\x7a\x68\x0f\xb2\x13\xf4\xf0\x01\x06\x76\x58\xd3\x15\x58\xb1\xb4\x5d\xdb\xf5\x3a\xd0\x32\x93\xa8\xb5\x24\x97\x92\xb3\x04\x69\xff\xfb\xa0\xd8\xd9\x62\x25\x01\x3a\x1e\x1f\x1f\xc9\xc7\x27\x0a\x6b\xf5\x44\xec\x94\x35\x39\x14\xe8\xe5\x3c\x5b\x8c\x0a\xf2\x38\x4a\x5e\x94\x29\x73\x18\xb3\x35\xd7\xb6\x48\x34\x79\x2c\xd1\x63\x9e\x00\x18\xd4\x94\xc3\x7a\x0d\xe9\x0d\x6a\x82\xf7\x77\xf1\x6c\x8b\x04\xc0\xfe\x32\xc4\xf7\x34\x25\x26\x23\xc9\x05\x2a\x80\x80\xb6\xd1\x64\xf5\xf0\xfd\xdb\x05\xca\x97\xa6\xde\xe0\x00\xbb\xa3\x25\xa7\x7a\xe5\x5e\x2b\x5b\x13\xa3\xb7\x9c\xce\xd8\x57\xe9\x4c\xf9\x79\x53\xa4\xd2\xea\x6c\x31\xea\xaa\xf6\x86\x77\x78\xa3\xca\x16\xfe\xf1\xf5\x32\xa0\xae\x26\x19\x14\x38\x39\xa7\xb2\xa9\x28\x87\x41\xc8\x3e\xd4\x24\xd3\x47\xb5\xa9\x1c\x24\x00\xcf\xb6\x78\x24\x5d\x57\xe8\xa9\xd5\xbb\xad\x0b\xe1\x7b\x99\x38\x1b\x82\xc9\x79\x64\x7f\x67\x2b\x25\x57\x39\xdc\x9a\x2b\x54\x55\xc3\xb4\x43\x59\xd8\xaa\xd1\x5b\x37\xda\x10\xdd\x16\xc5\xae\x1d\x6d\xd4\xc1\x11\xe7\xc9\xf8\xa7\x4d\xdd\xb8\x42\xa5\xf3\x1e\x05\x40\x06\xf0\xe6\x88\x11\xbb\x03\xa4\x35\xd3\x5e\x2d\xe9\xda\xaf\x2e\x15\xe7\xb0\x3e\xc6\x57\x33\xa1\xb1\x2f\xaa\x85\x27\x58\xc7\x42\xda\xaa\xcd\xcb\x25\x3d\xba\x47\x65\x88\x3f\xba\xb4\xd2\x38\xa3\x1c\xc2\x9b\x67\x4b\xcf\xd8\x52\xf2\x60\xbd\xf3\x7d\xfd\x66\xd1\xd7\xb0\xed\x7a\x7d\x7b\xf1\xf3\xe6\xf3\xe4\x4b\x24\x70\x81\x55\x43\x57\x6c\xf7\x2c\x04\x98\x2a\xaa\xca\x7b\x9a\xee\x67\xba\xdc\x1d\xfa\x79\x0e\xdb\xc3\x4f\xc3\x9c\xc8\x15\xad\xd1\x94\xb1\x9e\x02\xdd\x3c\x82\x06\x42\x0e\x22\xe8\x2d\x9a\xea\xc8\x83\xa0\x65\x12\xc1\xff\xc1\xb8\xb2\x86\x20\x28\x80\x29\x5b\x0d\x1a\x9d\x27\x4e\x23\x9e\x7e\x29\x15\x43\xb6\x79\x89\xac\xb5\x2f\xdb\x39\x8d\xec\x64\xbd\x35\xe8\x3d\x7e\x42\x89\x1e\x84\x60\x92\x0b\x61\x4d\xb5\x82\x3f\xbf\x64\x5c\x35\x61\x54\xf8\xdf\x27\xa7\xa7\xc3\xb3\xb3\xf4\x40\x0a\xce\xcf\x87\xff\xc3\x1b\x2c\x0b\xe7\x99\x50\x83\x58\x82\x18\x7f\x50\xc9\xde\xb2\x77\x4c\x35\x32\x81\x9f\x53\x77\x27\xf1\xa2\x7f\xcf\x03\x84\xa8\x3b\xba\x10\x1e\x79\x46\x5e\x94\x8a\x3f\xfd\xb3\x07\xed\x07\x9d\xd8\xc6\x78\x77\xf8\xb8\x0e\x9c\x2c\x80\x0e\x05\xed\x8d\x1c\xdd\xf6\x60\xb7\xbd\x4f\xd9\xef\x45\x5e\x76\xfd\x02\x31\x2d\x23\x2a\x93\xb3\x0d\x4b\x72\xfb\x77\xcb\xf4\xda\x90\x8b\x97\x68\x43\xd6\x4d\x0e\xa3\xe1\x50\x1f\xc8\x69\xd2\x96\x57\x9b\xf4\x44\xfd\x0e\x00\x00\xff\xff\x5c\x89\x6f\xd3\x11\x06\x00\x00")

func artifactsBackupCronjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupCronjobYaml,
		"artifacts/backup-cronjob.yaml",
	)
}

func artifactsBackupCronjobYaml() (*asset, error) {
	bytes, err := artifactsBackupCronjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backup-cronjob.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupPvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x8a\xc3\x30\x14\x44\x7b\x9d\x62\x2e\xb0\x86\x6d\xd5\x6e\xed\x65\x59\x83\x53\x7f\xa4\x21\x88\x58\x92\xa3\xff\x1d\x08\xc6\x77\x0f\x22\x4e\xf9\xe6\x0d\x33\xb7\x54\xa2\xc7\x1f\x9b\x26\x35\x16\x9b\xeb\xb2\x65\xfe\x2c\x92\xb2\x93\x35\xcd\x5d\xd4\xe2\xf1\xf8\x76\x99\x26\x51\x4c\xbc\x03\x8a\x64\x7a\xec\x3b\x86\x5f\xc9\xc4\x71\x38\x5d\x19\xba\x91\x10\xa8\x3a\xd6\x48\xed\x08\x7c\xe1\x9f\x12\x2f\x2d\x19\x47\x29\x4f\x07\x34\x6a\xdd\x5a\xf8\x14\x1a\xef\x1b\xd5\x4e\x02\xd4\x6a\x93\xeb\x39\x3f\xad\x0c\xc3\xf4\x4e\xfa\xcd\x2b\x00\x00\xff\xff\x02\x00\x34\xe8\xb0\x00\x00\x00")

func artifactsBackupPvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupPvcYaml,
		"artifacts/backup-pvc.yaml",
	)
}

func artifactsBackupPvcYaml() (*asset, error) {
	bytes, err := artifactsBackupPvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backup-pvc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\x3d\x4f\xf1\x81\x73\x05\xd7\x6c\xe2\xec\xea\x22\x0e\xd7\xe6\xda\x06\x93\x4b\xcc\xc5\x42\xc1\x87\x97\x06\xba\x39\x38\x26\xf7\xbb\xff\x51\xf6\x37\x2e\xea\x93\x58\x2c\x27\xf3\xf4\xe2\x2c\x2e\x49\x46\x3f\x5d\x29\x9b\xc8\x95\x1c\x55\xb2\x06\x10\x8a\x6c\x11\x57\x7d\x05\x03\x04\xea\x39\xe8\xf6\x0f\x50\xce\xfb\x60\xc7\x91\xb4\x72\x39\x0e\x32\x5a\x7c\x1a\x3a\xe0\x9c\x73\x58\x51\x67\xaf\x18\xda\x05\x24\x09\x2b\x92\xa0\xce\xbc\x6f\x34\x7b\x6f\x31\xf7\x68\x8f\x90\xa6\xae\xf7\x62\x00\x0d\xb4\xf0\xbf\xcd\x86\xf5\x47\x4f\xdf\x99\x4b\x57\x98\x5c\xb7\x59\xf3\x0d\x00\x00\xff\xff\x1c\x35\x5e\xba\x03\x01\x00\x00")

func artifactsMysqlConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlConfigmapYaml,
		"artifacts/mysql-configmap.yaml",
	)
}

func artifactsMysqlConfigmapYaml() (*asset, error) {
	bytes, err := artifactsMysqlConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\x85\xbf\x20\xe8\x3a\x94\xf6\xe8\x38\x90\x00\x89\xde\x97\x35\x8b\x75\x49\x1c\x6c\x67\xc5\xfd\x3d\xda\x5d\x51\x00\x05\xa5\x67\x3c\x7a\x63\x63\xe7\x57\x52\x63\x69\x09\xb0\x33\x7d\x3a\xb5\x75\xb2\x78\xb9\xb5\xc8\x72\xb3\x1c\xce\xe4\x78\x08\x17\x6e\x53\x82\xe3\x30\x97\xfa\x4c\x26\x43\x33\xdd\xd1\x1b\x37\x76\x96\x16\x2a\x39\x4e\xe8\x98\x02\x40\xc3\x4a\x09\xea\xd5\x3e\x4a\x2e\xc3\x9c\xd4\x62\xd6\xb8\x09\xd2\x49\xd1\x45\xe3\xac\x5e\xe2\xcc\xfe\x3e\xce\x31\x4b\x0d\xd6\x29\xaf\xe1\x59\x65\xf4\x04\xff\xee\xef\x18\x5b\x23\x00\x7b\xb9\x87\xeb\xcb\xd3\xe9\xb8\x13\x37\xb9\xb0\xf9\xfd\x1f\xeb\xc4\xe6\x9b\x6d\xdc\xe6\x51\x50\x7f\x76\xdd\xac\x5e\x86\x62\xf9\x75\x44\x00\xb0\x2c\x9d\x12\x3c\xae\xe8\x8e\x99\xa6\x00\xb0\x7c\xff\x6f\x39\x84\xaf\x00\x00\x00\xff\xff\x68\x53\xd4\x69\x4f\x01\x00\x00")

func artifactsMysqlCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlCrdYaml,
		"artifacts/mysql-crd.yaml",
	)
}

func artifactsMysqlCrdYaml() (*asset, error) {
	bytes, err := artifactsMysqlCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlServiceReadYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x4a\x03\x31\x14\x85\xf7\x79\x8a\xfb\x02\x13\x2d\x05\x17\xd9\xea\x46\x50\x41\x8b\xee\x6f\x33\xc7\x1a\xcc\x9f\x37\x99\x91\x52\xfa\xee\x92\x99\x80\x88\x74\x7b\x7e\xee\xf9\x2e\x67\xf7\x06\x29\x2e\x45\x43\xf3\x46\x7d\xba\x38\x1a\xda\x41\x66\x67\xa1\x02\x2a\x8f\x5c\xd9\x28\xa2\xc8\x01\x86\x4e\x27\xd2\x4f\x1c\x40\xe7\xf3\x20\xe0\x51\x11\x79\xde\xc3\x97\x16\x21\xe2\x9c\xff\x64\x14\x51\xfa\x8e\x90\x17\xbc\x43\x10\x2d\x7a\x6e\xa0\x75\xe8\xf1\xb8\x7b\x7e\xb8\xf5\x53\xa9\x90\xc5\x68\x27\x7e\x81\xac\xe8\x70\x2c\x5f\x3e\x65\x08\xd7\x24\xfa\x20\xd5\xeb\x83\xab\x1f\xd3\x5e\xdb\x14\xae\xe6\x4d\x6f\xfd\xa3\xeb\xfa\xe4\xc6\x55\x7e\xbd\xbf\x6b\x6a\xc9\xb0\x0d\x21\x27\xa9\x0b\xcb\xd0\xab\xcb\xce\x52\x6a\x96\xa1\xed\xf6\xfa\x46\x11\x15\x78\xd8\x9a\xe4\xc2\x7b\x3f\x01\x00\x00\xff\xff\xbd\x08\x38\x7a\x3e\x01\x00\x00")

func artifactsMysqlServiceReadYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlServiceReadYaml,
		"artifacts/mysql-service-read.yaml",
	)
}

func artifactsMysqlServiceReadYaml() (*asset, error) {
	bytes, err := artifactsMysqlServiceReadYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-service-read.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcf\x4a\x03\x31\x1c\x84\xef\x79\x8a\x79\x81\xae\x96\x82\x87\x5c\xf5\x52\xd0\xa2\x16\xbd\xa7\xd9\xb1\x06\xf3\xcf\x5f\xb2\x2b\xa5\xf4\xdd\x25\xbb\x0b\x82\x68\x8e\xf3\x65\x32\x5f\x4c\x76\xaf\x94\xe2\x52\xd4\x18\xd7\xea\xc3\xc5\x5e\x63\x4f\x19\x9d\xa5\x0a\xac\xa6\x37\xd5\x68\x05\x44\x13\xa8\x71\x3e\xa3\xdb\x99\x40\x5c\x2e\x0a\xf0\xe6\x40\x5f\x1a\x05\x4c\xce\xbf\x71\xfa\x8a\x94\x67\xbe\x51\x18\x2d\x97\x7b\x2b\xcc\x1b\x0f\xa7\xfd\xd3\xfd\xad\x1f\x4a\xa5\x4c\xa0\x3d\xf1\xe3\x62\xa5\x0b\xa7\xf2\xe9\x53\xa6\x98\x9a\xa4\x3b\x4a\xf5\xdd\xd1\xd5\xf7\xe1\xd0\xd9\x14\xae\xc6\xf5\xd2\xfa\x4b\xac\x9d\xc1\xf5\x73\xfc\xb2\xbd\x6b\x69\xc9\xb4\x4d\x21\x27\xa9\x93\xcb\x6a\xa9\x4e\x3b\x53\xa9\x21\x8d\xcd\xe6\xfa\x46\x01\x76\x76\xdb\x3e\x6a\xec\x52\xa4\x02\x0a\x3d\x6d\x4d\xf2\xcf\x87\xbf\x03\x00\x00\xff\xff\xe1\xa3\x4b\x10\x4b\x01\x00\x00")

func artifactsMysqlServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlServiceYaml,
		"artifacts/mysql-service.yaml",
	)
}

func artifactsMysqlServiceYaml() (*asset, error) {
	bytes, err := artifactsMysqlServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x6d\x73\xe2\x38\x12\xfe\x9e\x5f\xd1\xc5\xa4\x36\xe4\x26\x22\x30\x53\x73\x53\xc7\x0c\x73\x95\x25\xcc\x4b\x5d\x12\x58\xcc\xee\xdc\x56\x86\x63\x85\xdc\x80\x2a\xb6\xe4\x48\x32\x09\x97\xc9\xfd\xf6\x2b\x59\x06\x64\xc7\x24\xd9\x0f\x7b\x55\x7b\xfe\x40\x19\xbd\xb4\x1e\x3d\xea\x6e\x3d\x6d\x9a\xf0\x5f\x50\x69\x2e\x45\x1b\x68\x92\xe8\xe3\x65\x6b\xef\x8a\x8b\xb0\x0d\x81\xa1\x06\x67\x69\x14\xa0\xd9\x8b\xd1\xd0\x90\x1a\xda\xde\x03\x10\x34\xc6\x36\xdc\xdd\x41\xe3\x82\xc6\x08\xf7\xf7\x7b\x00\xf2\x46\xa0\x1a\xe2\x0c\x15\x0a\x86\xda\x0e\x03\x20\xe0\x0c\x9d\xaf\x82\x9f\xce\xba\x51\xaa\x0d\xaa\xac\x03\xc0\x5f\x95\xa9\x46\xbc\xd2\xd7\x91\x4c\x50\x51\x23\x55\x63\xae\x4c\xd4\x98\x73\xb3\x48\xa7\x0d\x26\x63\x8b\xc8\xcd\xaa\x5a\xd9\x3e\x29\x0f\x5d\xf3\xcf\x5f\x4e\x6d\xab\x4e\x90\x59\x08\x1a\x23\x64\x46\x2a\x07\x27\xa6\x86\x2d\xce\xe8\x14\xa3\x1c\x9f\x85\x91\x94\xed\x69\x54\x4b\xce\xf0\xa2\x62\x29\x85\x49\xc4\x19\xd5\xae\x3d\x48\x90\x35\x86\x79\x93\x1b\x60\x30\x4e\x22\x6a\x30\x5f\xcf\xe3\xcc\x3e\x51\x61\xe9\xca\xc5\x01\xd6\xd0\xed\xc3\x05\x37\x5d\x29\x0c\xe5\x02\xd5\x66\x22\xc9\x69\xb0\xbd\x24\x23\x6e\x63\x91\xc7\x74\x8e\x6d\xc8\x1a\xdb\x16\x88\x36\x9b\x3e\x26\xe3\x98\x8a\x70\xbb\x3c\x81\x29\xd5\x0b\xef\x6f\x8d\xb0\x9a\xf7\xf7\xfb\xe6\xdd\x92\x62\x80\xe0\xad\xd7\xf2\x02\x3e\xa1\xb0\xe7\x85\x6e\xb9\x8c\x37\x54\x84\x87\x30\x53\x32\x86\x44\x86\x20\x55\xc8\x05\x8d\x80\x8b\x10\x6f\x1b\xde\xe4\xcb\x4b\xf8\x6d\x21\xb5\xb1\x1b\xf9\x0d\x3a\xff\x01\x52\xbf\x6c\x92\xbf\x8d\x5f\x1e\xee\xc3\x78\x0c\xdf\xbf\x03\xde\x72\x03\x2d\x6f\x4a\x6e\xab\xb3\x7f\xf7\xe3\x49\xf0\x79\x32\xec\x9d\x9f\x8c\xba\x9f\x2f\x5b\xe3\x7b\x6f\x10\xb2\x85\x84\xcb\x0c\x4f\x38\x86\x0f\x70\x1c\x0b\x73\xcc\xa4\x98\x35\xc2\xe3\x0d\xbe\x06\x13\xb3\xc2\x46\x4e\xc2\x10\xa8\x00\x39\x9b\xd9\x6d\x1a\x09\x74\x29\x79\x08\x0a\xb3\x29\xe1\x76\x67\x9d\x26\x2c\x69\x94\x62\xa3\xbc\xe4\x76\xc4\x7e\xbd\xde\x6a\x36\xe1\x25\xec\xe7\x80\x0f\x0f\xe1\xc3\x73\x81\x74\x65\xb2\xb2\x5e\xa1\x64\xa2\xb8\x65\xd6\xcd\x80\x19\x8f\x50\x3b\x5a\x6d\x0b\x9f\x93\x98\x26\x16\x28\xc6\x89\x59\x9d\x72\xe5\x03\xe2\x33\x4b\xef\x7a\x79\x20\x78\x0d\x4d\x18\x8f\xdf\x81\x59\xa0\xf0\xc6\x01\xb0\x64\x8b\xcb\xd9\x3c\x8e\xa9\x8d\x51\x0b\xac\x00\xd9\xdf\x6f\xa4\xf1\x29\x2b\x3a\xa2\x4b\x7c\xcc\xc8\x8c\x6f\xfe\x2c\x65\x94\xc6\x78\x2e\x53\x61\xb4\xef\x9b\xce\xc7\xed\x54\x6f\x5e\x6c\x87\x0d\xa8\x59\xb4\x7d\xcb\x95\xb3\x1c\x94\x27\xe6\x16\x06\x6d\x66\x47\x52\x60\x75\x60\xd9\xc4\x74\x7c\x6b\x14\x9d\x52\x76\x95\x26\x7f\x78\x88\x05\x57\x3c\xb1\xe7\xe6\x30\xd9\xa3\xb5\xf9\x04\x68\xa4\x90\x86\x2b\x1b\x24\xda\xe8\x52\x60\x91\x10\x8e\x97\x54\x1d\x47\x7c\x7a\x9c\x6d\xc2\xfd\xda\xb8\xfa\xe1\x07\x17\x57\xcd\xc7\x16\x91\x02\x9c\x17\x40\xbd\x10\xbf\xd0\x3c\xfc\x5f\x84\x70\x95\xef\xee\x00\xde\xcd\xf0\x66\x8c\xb8\x94\xa3\x70\xc9\x65\xaa\x21\x41\x2c\x84\x84\x60\xd4\x00\x21\x0a\xd9\x92\x48\x11\xad\xfc\xa4\x4b\xf6\xeb\xf5\xf5\x82\xa4\x75\x78\xd8\xf0\xfa\xe0\xf5\xeb\xe6\x5b\xf8\x0e\xb7\x53\x6d\x14\xd2\x18\xc8\x2d\x90\x6e\x89\xde\x02\xa4\x81\xc2\x84\x2a\xcc\xe8\x74\x3e\xe2\xe3\xd8\x7a\x0e\x10\x92\xe4\x43\x09\x31\x54\xcd\xd1\x90\x90\xab\xce\x0e\xd3\x8f\x07\x89\x65\x60\x87\xa3\xef\x42\xaa\xd3\xa9\x1b\x51\xec\x78\x46\xd8\xa1\x61\xb9\x5b\x15\x82\x8f\xed\xbc\xa6\x9e\x7f\x43\xa1\x58\x3e\xdc\xdc\xf9\xaf\xc1\x4f\x67\x93\x61\xbf\x3f\x9a\x0c\x4e\x82\xe0\x6b\x7f\x78\xea\x21\xcb\xd2\xf1\x47\x25\xe3\x76\x21\x27\x69\x64\x0a\xcd\x3f\x70\x35\xc4\x59\xb1\xc7\xd7\x10\xd9\x05\x3e\xa0\x5a\xdf\x48\x15\x6e\xc5\xc4\xfa\xb9\xc2\x55\x1b\x92\xbc\x7b\xd3\x97\x48\x55\x75\x06\x65\x82\x37\x7c\x0c\xa4\x32\x6d\xeb\x48\x7f\xfd\x13\x9d\xa6\x95\x3a\x5a\xa6\x6a\xa3\xe4\xd6\x8d\xd7\x29\x6a\xa3\xdb\xa5\x0b\x20\x6d\xc3\x9b\x66\x33\x2e\xb4\xc6\x18\x4b\xb5\x6a\x43\xeb\xd3\x36\xd7\x47\x7c\x89\x02\xb5\x1e\x28\x39\x45\xdf\x08\xde\x6e\x45\xcf\x9a\x3f\x97\x4a\xe1\xb2\x66\x53\x68\xed\x28\x4b\x9d\x47\x50\xcb\xd0\xd2\x30\xe6\x02\x12\x2e\xe6\x40\x92\x6f\xb5\xfd\xbb\x0a\x2f\xb9\xff\x56\xab\x8d\xfd\x7b\x51\x70\xc3\x69\x74\x8a\x11\x5d\x05\xc8\xa4\x08\x75\x1b\x5e\xfb\x19\x25\x41\xc5\x65\xb8\xe9\x6b\xf9\x7d\x86\xc7\x28\x53\xb3\xe9\x7c\xe3\x31\x45\x43\xfe\xcc\x5d\xbd\x80\xee\x02\xd9\x15\xdc\x20\x30\x2a\xb2\x01\xa9\x41\xb8\x4e\x51\x71\xd4\x20\x97\xa8\x60\xd4\x1d\x40\x5d\x5f\xf1\x84\x08\x34\x37\x52\x5d\xd9\x5d\x72\x6d\xe5\x49\x21\x01\x3f\xc5\x11\x90\x05\xb4\x5e\xbd\x6d\x34\x1b\xcd\x46\xeb\x51\x9a\x80\x20\x1c\x04\xbd\xb3\x5e\x77\x04\xad\x83\xa7\x49\x7b\xb3\x9b\xb3\x57\x8f\x50\xd6\x2a\x25\x86\x6d\x36\xfc\x9d\xd7\xec\x9f\x39\x4f\x54\x6c\xba\x2a\x59\xbc\xfd\xa3\x34\x05\x2b\xab\x83\xbd\xc2\xfd\x75\x8a\x06\x55\xcc\x05\xc2\x94\x8b\x48\xce\x21\x91\x9a\x1b\x2e\xad\x3a\x76\xfa\x20\xcc\x12\xd4\x91\xd5\x22\x54\xac\x1e\x0a\x4f\x32\xf3\xf6\x38\xc9\x94\xe0\x84\x8b\x99\xac\x96\xa0\x2f\xe0\x9f\x46\xd1\x1f\xdd\x9d\xb8\x96\x35\xf3\xbc\xb0\x08\x81\x42\x42\x95\x75\x40\xa8\x75\x3f\x9f\x5c\x7c\xea\xc1\xf9\x49\x30\xea\x0d\x61\xd4\xaf\x65\x51\xb3\x2a\x59\x9b\x22\xa3\xa9\x46\xb8\xc1\x03\xe5\x04\x8d\x8d\x9e\x4c\x1d\x64\xf1\xc6\xb5\xb1\x0d\x4e\xa0\x16\xf3\xd5\x72\x07\x6e\xb6\xa0\x62\x8e\x13\xa7\x89\x26\x46\x36\xf4\x75\xd4\xe0\xe5\x6d\x7c\x99\x0b\xa9\xd0\x37\xe1\x08\x74\x36\xb8\x00\xb3\xe0\x1a\x18\xd5\x08\x75\x6e\x0e\x34\xa4\xb6\x36\xd5\xba\x14\xd2\x2a\x2e\x11\xe8\x59\x29\x88\xf0\x2a\xb2\xfd\x15\x77\xb0\xfd\xb5\xc0\x4b\xc8\x15\x32\x13\xad\x1c\x41\xb9\xf6\x87\x01\x55\xfa\xc1\xf9\x17\x61\x5a\xf1\x67\x35\x55\xf5\xe2\x99\x1c\xfc\x57\xbd\xf1\x97\xbf\x1f\x5e\x5e\xb6\x75\x42\x19\xb6\xc7\xe3\x97\x59\xc3\x4e\x71\x98\xed\xfd\xc9\x8d\xe7\xf5\xd6\x03\x6f\xc8\xdf\x26\x67\xfd\x4f\x93\x8f\x5f\xce\x7a\x9d\x83\x87\x22\xf3\xe0\xe8\x5b\x29\x72\xed\xe3\x4d\x1c\xf4\x83\xb2\x36\x7d\x35\xbe\xaf\xc1\x87\x67\xf8\xc0\x8c\x17\x03\xc9\xe5\x79\x3e\xb3\xa9\x5e\x20\x86\xb6\x5a\x63\x32\x4e\x22\x34\x08\x34\x97\xda\xd3\x15\x68\x63\x1d\x5c\xcc\xd7\xdf\x16\xca\x5c\x6f\xce\x79\x07\x84\xea\x83\x76\x24\x7d\xa5\x3c\x33\x3d\x93\xca\x29\x83\x0c\xc5\x14\xc1\x85\x59\x9d\x32\x86\x49\x36\x82\x49\x21\x90\xd9\xb5\xf5\x61\xad\x60\x29\x15\x86\x47\x50\x79\xa1\xec\xb8\x4f\xb2\xeb\xa4\xb6\xbe\x4e\x6a\xef\x20\x94\xa0\x23\xc4\x04\x5a\xf6\x5d\xe0\x5e\x05\xd4\x2f\xee\x9e\xe1\xff\x2e\x51\x91\x17\xbd\x19\x5b\x6b\x57\xac\x95\x43\x4f\xb8\xb8\xb2\x19\x6a\x9d\x48\xad\x7e\xb1\xcc\x1e\x01\x35\xc6\x56\xc9\x2e\xfe\xa8\x21\xb1\xd4\x86\x48\xc1\x1e\x86\xff\x2e\x86\x2b\xdb\xa5\xe2\xf3\xa2\x81\xdf\x45\xd1\xfb\xf7\xbd\xfe\x47\x6f\xfe\x7e\xfd\xfd\xce\x65\x0e\x8f\xf6\x2a\x1c\xf6\x73\x3f\x18\x75\x0e\xfc\x42\xa6\xe9\x97\x2e\x07\x95\x93\x7e\x0e\x7a\xc3\xce\x81\x92\xd2\x54\xf7\xaf\x11\xda\xf0\xa9\x02\x5e\x3d\xab\xdb\xbf\xb8\xe8\x75\x47\x93\x61\x6f\x34\xfc\xb5\xd3\x6a\xbe\xf3\x06\x05\xa3\x93\xe1\x08\x82\xb3\x93\x5f\x7a\x7e\x73\x71\xf7\xe5\xe0\x09\xec\xd1\x01\xcd\x3f\xab\x58\xa7\xd5\x28\xc2\xbc\xa0\xd2\x70\xb3\x40\xb1\xd6\xa2\x18\xda\x28\xb2\x05\x5f\xa1\x0e\xb6\xca\x6a\x5d\xf6\x45\x5c\x1b\x14\x40\xc8\x15\x62\x42\x64\x92\xbd\x5b\x83\xae\x16\x24\x24\xa6\xb7\xc4\x46\x80\xee\xb4\x5c\xc5\x47\x18\x14\x53\x45\xad\x50\xb9\x6d\x5e\xb2\x5b\x82\x64\xf9\x96\x10\x57\x22\x76\xb6\xb5\x22\xb1\xe5\x71\xc7\x73\x07\x92\x6a\x54\x1d\xcb\xbe\x2d\xff\x72\xc1\xd0\x79\x44\xbe\xfe\x5f\x57\x0c\xad\x9d\x15\x43\xb3\x79\xbe\xae\x19\xdc\xc6\x1f\xd4\x94\x05\x7c\xeb\x8f\x60\x6d\xb8\xbb\xaf\x18\x57\xfa\x10\xe4\x9a\xce\x69\xe2\x43\x2a\xd6\x70\x6e\xd1\x6e\x44\x79\x3c\xca\x3f\xe8\x66\x08\xc8\x83\x2f\xba\x25\xfe\xfd\x6f\xb7\x36\xb9\x6a\x7d\x2e\x43\xd4\x56\xa0\x0f\x91\x86\x5f\x15\x37\xd8\x17\x0c\x37\x12\xbb\x82\xb3\x2a\xc6\xb4\x91\x2a\x13\xc6\x1b\x35\x1a\xb8\x16\x2b\x46\xff\x1b\x00\x00\xff\xff\x99\x38\x45\x6c\xc0\x17\x00\x00")

func artifactsMysqlStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlStatefulsetYaml,
		"artifacts/mysql-statefulset.yaml",
	)
}

func artifactsMysqlStatefulsetYaml() (*asset, error) {
	bytes, err := artifactsMysqlStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-statefulset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"artifacts/backup-crd.yaml":         artifactsBackupCrdYaml,
	"artifacts/backup-cronjob.yaml":     artifactsBackupCronjobYaml,
	"artifacts/backup-pvc.yaml":         artifactsBackupPvcYaml,
	"artifacts/mysql-configmap.yaml":    artifactsMysqlConfigmapYaml,
	"artifacts/mysql-crd.yaml":          artifactsMysqlCrdYaml,
	"artifacts/mysql-service-read.yaml": artifactsMysqlServiceReadYaml,
	"artifacts/mysql-service.yaml":      artifactsMysqlServiceYaml,
	"artifacts/mysql-statefulset.yaml":  artifactsMysqlStatefulsetYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"artifacts": {nil, map[string]*bintree{
		"backup-crd.yaml":         {artifactsBackupCrdYaml, map[string]*bintree{}},
		"backup-cronjob.yaml":     {artifactsBackupCronjobYaml, map[string]*bintree{}},
		"backup-pvc.yaml":         {artifactsBackupPvcYaml, map[string]*bintree{}},
		"mysql-configmap.yaml":    {artifactsMysqlConfigmapYaml, map[string]*bintree{}},
		"mysql-crd.yaml":          {artifactsMysqlCrdYaml, map[string]*bintree{}},
		"mysql-service-read.yaml": {artifactsMysqlServiceReadYaml, map[string]*bintree{}},
		"mysql-service.yaml":      {artifactsMysqlServiceYaml, map[string]*bintree{}},
		"mysql-statefulset.yaml":  {artifactsMysqlStatefulsetYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
