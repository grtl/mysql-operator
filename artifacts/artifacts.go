// Code generated by go-bindata.
// sources:
// artifacts/backupinstance-crd.yaml
// artifacts/backupinstance-job-create.yaml
// artifacts/backupinstance-job-delete.yaml
// artifacts/backupschedule-crd.yaml
// artifacts/backupschedule-cronjob.yaml
// artifacts/backupschedule-pvc.yaml
// artifacts/cluster-configmap.yaml
// artifacts/cluster-crd.yaml
// artifacts/cluster-service-read.yaml
// artifacts/cluster-service.yaml
// artifacts/cluster-statefulset.yaml
// DO NOT EDIT!

package artifacts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _artifactsBackupinstanceCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4b\x4e\xc4\x30\x0c\x86\xf7\x39\x85\x2f\x40\x50\x77\x28\x4b\x60\x83\x18\x90\x00\x89\xbd\x9b\x9a\x8e\xd5\xbc\x88\x9d\x8a\xb9\x3d\x6a\x0a\x9a\xcd\x20\x76\x79\x7c\xfe\x1f\x32\x16\x7e\xa7\x2a\x9c\x93\x03\x2c\x4c\x5f\x4a\x69\xbb\x89\x5d\x6e\xc4\x72\xbe\x5e\x87\x91\x14\x07\xb3\x70\x9a\x1c\xdc\x35\xd1\x1c\x5f\x49\x72\xab\x9e\xee\xe9\x83\x13\x2b\xe7\x64\x22\x29\x4e\xa8\xe8\x0c\x40\xc2\x48\x0e\xe2\x49\x3e\xc3\x88\x7e\x69\x85\x93\x28\x26\x4f\x62\x7d\xb5\xfd\x3d\x17\xaa\xa8\xb9\xda\xb9\x6a\xb0\x33\xeb\xb1\x8d\xd6\xe7\x68\xa4\x90\xdf\x34\xe6\x9a\x5b\x71\xf0\x2f\xbf\xbb\xc9\x36\x02\xb0\x67\x7c\x3a\xbd\xbd\x1c\x6e\xbb\xf1\xc3\x8f\x71\xff\x0d\x2c\xfa\xf8\x17\x71\x60\xd1\x4e\x09\xa7\xb9\x05\xac\x17\x0b\x74\xa2\x84\x56\x31\x5c\x2e\xb8\x4b\x1c\x73\xd5\xe7\x73\xac\x2b\x88\x23\x9f\x4f\x1b\x24\x3e\x17\x72\xd0\xa1\x82\x9e\x26\x03\xb0\xfe\xee\x61\x1d\xcc\x77\x00\x00\x00\xff\xff\x07\x47\x8e\xe5\x97\x01\x00\x00")

func artifactsBackupinstanceCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupinstanceCrdYaml,
		"artifacts/backupinstance-crd.yaml",
	)
}

func artifactsBackupinstanceCrdYaml() (*asset, error) {
	bytes, err := artifactsBackupinstanceCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupinstance-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupinstanceJobCreateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x16\x6a\x01\x9f\x68\x3b\xc8\xa1\x00\x81\x1c\x5a\x05\x05\xda\x22\xa9\xd1\xa0\xb9\x16\x6b\x6a\x63\x13\x26\x29\x86\x5c\x05\x36\x1c\xfd\x7b\x41\xc9\x8a\xe9\xd4\x7d\x5c\xaa\x83\x20\xce\x8e\x76\x86\x9c\x25\x7a\x7d\x4f\x21\xea\xc6\x49\x58\x22\xab\xf5\xec\xe9\xa2\xd8\x68\x57\x4b\xf8\xdc\x2c\x0b\x4b\x8c\x35\x32\xca\x02\xc0\xa1\x25\x09\xfb\x7d\x2a\x54\x81\x90\xe9\x16\x2d\xc1\xb4\x7f\x77\x5d\x11\x3d\xa9\xc4\x63\xb2\xde\x20\x53\xfa\x06\x18\xd1\xf4\x04\x8a\x8c\x81\x17\x8d\xd1\x6a\x27\xe1\xab\xfb\x88\xda\xb4\x81\x0e\xe5\xa7\xc6\xb4\x96\xe2\xc8\x16\x07\xc5\x25\xaa\x4d\xeb\x0f\x20\x80\x4f\x76\x23\x93\xe3\xfb\x9e\x5f\x19\xd4\x56\xbe\x94\x01\x54\x02\x6e\x47\xb3\x8b\xfb\x6a\xb0\x79\xe7\x49\x4d\xef\xd4\x9a\xea\xd6\xf4\x7e\x4f\x55\x54\xe3\x1e\x5e\x9a\x90\xf5\xbc\xbb\xd6\x41\xc2\xfe\x1c\x4f\xaf\x84\xc5\xa3\xa3\x01\xba\x41\x9f\xbb\x18\xd8\x76\x17\x1f\x4d\xf1\x42\x63\xd4\x8e\xc2\xdf\x76\xa8\x2d\xae\x48\xc2\x2a\xb0\x99\x6d\x39\xe0\x50\x96\xe9\x4c\x23\x67\xaa\xd6\xa2\xab\x8f\x9a\x02\x96\x18\xd7\xd9\xb2\x14\xaa\xcc\x96\xcf\x99\xbb\x48\x0c\x82\xb6\x45\x06\x6d\xda\x25\x29\x36\xe0\xd3\x14\x0c\xc6\x07\x61\xed\x22\xa3\x53\x94\x4e\x73\x0c\x1b\x84\xe0\x9d\xa7\xab\x89\xa5\xb0\xa2\x09\x08\x31\xfc\x36\xd9\x97\x91\x91\xdb\x58\x4a\xd8\x97\x7e\x8d\x91\x4a\x09\xe5\x5d\x8a\x9d\xea\xb2\xeb\x26\xb9\xe4\x87\xf7\xd5\x97\xef\x8b\x1f\xd7\x9f\xbe\x5d\x95\xb3\x5e\x71\x36\x48\xce\xfe\x14\xdc\x2c\xf3\x51\xe6\xed\xde\x40\x65\x1a\x47\x90\x06\x16\x1e\x42\x63\xc1\x62\x64\x0a\xd3\x8c\x63\x37\xb5\x0e\x20\x3c\xbc\xdd\x1f\xd5\xbb\x3c\x37\x85\x0c\x42\x04\x52\x4f\xa2\x71\x66\xd7\xef\xba\xb7\x50\x99\x36\x75\x83\xae\x13\xf3\xe9\x19\x14\x2e\x2f\xe7\xef\xe0\x19\xb6\xcb\xc8\x81\xd0\x82\xd8\x82\xa8\x5e\x09\x9d\xd8\x5d\x04\xf2\x18\x08\x78\x4d\x87\x19\xc8\xad\x1e\xa3\x4f\xc7\x7b\xa0\x0a\xc1\x18\x56\xc4\xa2\xd6\xe1\xea\xb7\xad\xff\x67\x96\x55\x63\xbd\xa1\x31\xcd\x51\x71\xb8\xbb\x37\x4d\xeb\x38\xe6\x23\x79\x76\xc0\x01\x6c\x22\x2e\x90\xd7\x12\xfe\x3d\xf8\x5f\xda\x9e\xdc\xd9\xd3\xa6\xc4\xea\xd0\x38\x91\xa6\x75\x46\x0b\x14\x9b\x36\x28\x8a\xf9\x75\x4d\xf0\x63\x4b\x91\x5f\xa1\x00\xca\xb7\x12\x2e\xe6\x73\xfb\x0a\xb7\x64\x9b\xb0\xeb\x4b\x37\xba\xf8\x19\x00\x00\xff\xff\xa8\xd9\x45\x31\x48\x05\x00\x00")

func artifactsBackupinstanceJobCreateYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupinstanceJobCreateYaml,
		"artifacts/backupinstance-job-create.yaml",
	)
}

func artifactsBackupinstanceJobCreateYaml() (*asset, error) {
	bytes, err := artifactsBackupinstanceJobCreateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupinstance-job-create.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupinstanceJobDeleteYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcf\x6a\xf3\x30\x10\xc4\xef\x7e\x8a\x25\xf7\xc4\x7c\x57\x5d\xf3\xd1\x43\xa1\x69\x20\xe0\xfb\x5a\x5e\x6a\x11\xad\xa4\x4a\xab\x50\x13\xf2\xee\x45\xfe\x57\x1f\x4a\x4b\x7d\x30\xda\x99\x61\xe7\xc7\x62\x30\x0d\xc5\x64\xbc\x53\xd0\xa2\xe8\xbe\xbe\xfd\xab\xae\xc6\x75\x0a\x9e\x7d\x5b\x31\x09\x76\x28\xa8\x2a\x00\x87\x4c\x0a\xee\xf7\x62\xfc\x27\x4b\x42\x27\x64\x82\xc3\xf8\x7f\x3c\xaa\x14\x48\x97\x9c\x10\x07\x8b\x42\xe5\x0d\xb0\xa8\xe5\x8b\x94\x04\xa3\x9c\xbd\x35\x7a\x50\xf0\xea\x9e\xd0\xd8\x1c\x69\xb6\x6f\xde\x66\xa6\xb4\xa4\xf7\x73\x63\x8b\xfa\x9a\xc3\x2c\x02\x84\x82\x9b\x84\x9c\x34\x63\xfe\x68\xd1\xb0\x5a\x6d\x00\x5d\x84\xd3\x02\x7b\x6e\x8e\x13\xe6\x25\x90\x3e\x5c\x74\x4f\x5d\xb6\x23\xef\x9c\xf6\x4e\xd0\x38\x8a\xbf\xf5\x1a\xc6\xb7\xa2\xe6\x34\xb4\xfe\x63\x95\xb5\x67\x46\xd7\x7d\x01\xec\x21\xf2\x66\xd8\xed\xe3\x6e\x33\xd6\x3c\xa4\x77\x5b\x4f\xbb\xeb\x9f\xf8\x8a\xb9\xde\x76\x59\x30\x9d\xe8\xc5\x67\x27\x69\x5b\xf9\x2d\x31\x00\x97\xe0\x19\xa5\x57\x7f\x28\xae\x3e\x03\x00\x00\xff\xff\xc4\x73\x86\xd7\x14\x02\x00\x00")

func artifactsBackupinstanceJobDeleteYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupinstanceJobDeleteYaml,
		"artifacts/backupinstance-job-delete.yaml",
	)
}

func artifactsBackupinstanceJobDeleteYaml() (*asset, error) {
	bytes, err := artifactsBackupinstanceJobDeleteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupinstance-job-delete.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupscheduleCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc9\x4e\xc4\x30\x0c\x86\xef\x79\x0a\xbf\x00\x41\x73\x43\x39\x02\x37\x06\x24\x18\x89\xbb\x9b\x9a\xd6\x6a\x36\x62\xa7\x62\xde\x1e\x35\x65\xb9\x0c\xe2\x96\xe5\xf3\xbf\xc8\x58\xf8\x95\xaa\x70\x4e\x0e\xb0\x30\x7d\x28\xa5\xed\x26\x76\xb9\x11\xcb\xf9\x7a\x3d\x0c\xa4\x78\x30\x0b\xa7\xd1\xc1\x5d\x13\xcd\xf1\x85\x24\xb7\xea\xe9\x9e\xde\x38\xb1\x72\x4e\x26\x92\xe2\x88\x8a\xce\x00\x24\x8c\xe4\x20\x9e\xe5\x3d\x0c\xe8\x97\x56\xc4\xcf\x34\xb6\x40\x62\x7d\xb5\xfd\x3d\x17\xaa\xa8\xb9\xda\xa9\x6a\xb0\x13\xeb\xdc\x06\xeb\x73\x34\x52\xc8\x6f\x1a\x53\xcd\xad\x38\xf8\x97\xdf\xdd\x64\x1b\x01\xd8\x33\x3e\x9e\x4f\xcf\xc7\xdb\x6e\x7c\xfa\x32\xee\xbf\x81\x45\x1f\xfe\x22\x8e\x2c\xda\x29\xe1\x34\xb5\x80\xf5\x62\x81\x4e\x94\xd0\x2a\x86\xcb\x05\x77\x89\x39\x57\x7d\xfa\x8d\x75\x05\x71\xf8\x39\x6c\x88\xf8\x5c\xc8\x41\x47\x0a\x7a\x1a\x0d\xc0\xfa\xbd\x85\xf5\x60\x3e\x03\x00\x00\xff\xff\x89\xa9\x99\xc4\x95\x01\x00\x00")

func artifactsBackupscheduleCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupscheduleCrdYaml,
		"artifacts/backupschedule-crd.yaml",
	)
}

func artifactsBackupscheduleCrdYaml() (*asset, error) {
	bytes, err := artifactsBackupscheduleCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupschedule-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupscheduleCronjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4b\x6f\xd3\x40\x10\xbe\xfb\x57\x8c\x22\x59\x3d\xa0\x75\x94\x1b\xb2\x7a\xa2\x34\xa2\x88\x92\x42\x0a\x12\xb7\x8e\xd7\x93\x78\xc9\x3e\xcc\xee\x38\x10\xb5\xfd\xef\x68\xed\x24\xf2\x83\x4b\x98\x83\x25\x7f\x8f\x9d\x99\xf5\x67\xac\xd5\x77\xf2\x41\x39\x9b\x43\x81\x2c\xab\xf9\x7e\x51\x10\xe3\x22\xd9\x29\x5b\xe6\x70\xe3\x9d\xfd\xe8\x8a\xc4\x10\x63\x89\x8c\x79\x02\x60\xd1\x50\x0e\xcf\xcf\x27\xf2\x33\x1a\x82\xac\x7d\xbe\xbe\x26\x00\xee\xb7\x25\xff\x95\x36\xe4\xc9\x4a\x0a\xd1\x02\x20\xa0\x3b\xf0\xfe\xb0\xfe\xf2\xe9\x1d\xca\x5d\x53\xaf\x65\x45\x65\xa3\xa9\xe5\x01\xfa\xa3\x48\x9f\x99\x43\xf8\xa5\x5d\x4d\x1e\xd9\xf9\x6c\xeb\x59\x67\x5b\xc5\x55\x53\x64\xd2\x99\xf9\x7e\x71\x74\x9d\x87\xe9\x0d\x10\xab\x51\x65\x07\x7f\xbb\x7b\x1f\xd1\x50\x93\x8c\x93\x84\x63\xd3\x1c\x66\x91\x5d\xd7\x24\xb3\x47\xd5\x3a\x67\x09\xc0\x4f\x57\x3c\x92\xa9\x35\x32\x75\x73\x9f\x7c\xb1\x78\xc0\x8c\xd9\x58\x9e\x02\xa3\xe7\x07\xa7\x95\x3c\xe4\xb0\xb2\x4b\x54\xba\xf1\xd4\x93\x48\x67\x19\x95\x25\x1f\xfa\x46\x71\x5c\xa4\x68\x6f\xa6\x47\x00\x28\x83\x5b\xca\x41\xa3\xac\x34\x5a\xda\x93\x0d\xce\xce\x77\x6f\x83\xd8\x35\x05\x49\xd6\x03\xb5\x74\xc6\xa0\x2d\xf3\x01\x28\x20\x54\x23\x60\x26\xe4\x6c\x04\xbd\x0c\xde\x01\x24\x32\x5c\x5f\xc3\xed\x6a\x09\x2f\x70\xec\x05\xd2\x13\x32\x81\xd8\x80\x18\xc9\xff\xef\xfb\x9d\x6a\x92\x8e\x3b\x1b\x18\xad\xa4\x91\xae\x1f\xc4\x61\x9d\x93\x30\xf4\xc7\x58\x3c\x78\xda\xa8\x3f\xe7\x88\x88\xa7\x32\xee\x70\xf5\x26\xfd\x21\x52\x23\xd2\x52\xa4\x1f\x44\x7a\x2f\xd2\xf5\xd5\xd3\xe4\x58\x8d\x05\xe9\x30\x6d\xd7\x8f\xd2\x34\x7e\x83\x7b\xd4\x4d\x60\xf2\x9d\xac\x0d\xdc\x4d\x87\x4c\xe5\xe3\x3c\x5d\xd2\xe8\x92\x36\x8c\xdc\xfc\x63\xa7\xba\xc2\x40\x39\x9c\x7e\xcc\x72\x24\xb8\x5d\x2d\x93\xbf\x01\x00\x00\xff\xff\x64\xc6\xd7\x96\x31\x04\x00\x00")

func artifactsBackupscheduleCronjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupscheduleCronjobYaml,
		"artifacts/backupschedule-cronjob.yaml",
	)
}

func artifactsBackupscheduleCronjobYaml() (*asset, error) {
	bytes, err := artifactsBackupscheduleCronjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupschedule-cronjob.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupschedulePvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x8a\xc3\x30\x10\x45\x7b\x9d\xe2\x5f\x60\x0d\xdb\xaa\x75\xed\xc5\xac\xc1\xa9\x07\xe9\x13\x44\x2c\xc9\xd1\xc8\x81\x60\x7c\xf7\xa0\x38\x69\x06\xde\xfc\x07\xef\x16\x92\xb7\x18\x59\x34\x68\x65\xaa\x73\x5e\xb6\xc8\x7e\x91\x10\x8d\xac\x61\x6e\x43\x4e\x16\x8f\x5f\x13\x59\xc5\x4b\x15\x6b\x80\x24\x91\x16\xfb\x8e\x71\xee\xff\x24\x12\xdd\xfb\x1e\x87\xd1\x95\xae\x19\xe2\x1c\x55\x87\xec\xa9\x0d\x81\x1f\xfc\x53\xfc\xa5\x84\xca\x41\xd2\xd3\x00\x85\x9a\xb7\xe2\xbe\x42\xe1\x7d\xa3\xd6\x0f\x01\x5a\x73\x91\xeb\x99\xe9\xa6\x95\xae\x9b\xce\x4f\xcb\xbc\x02\x00\x00\xff\xff\x31\xd3\xda\x23\xb8\x00\x00\x00")

func artifactsBackupschedulePvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupschedulePvcYaml,
		"artifacts/backupschedule-pvc.yaml",
	)
}

func artifactsBackupschedulePvcYaml() (*asset, error) {
	bytes, err := artifactsBackupschedulePvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupschedule-pvc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\x3d\x4f\xf1\x81\x73\x05\xd7\x6c\xe2\xec\xea\x22\x0e\xd7\xe6\xda\x06\x93\x4b\xcc\xc5\x42\xc1\x87\x97\x06\xba\x39\x38\x26\xf7\xbb\xff\x51\xf6\x37\x2e\xea\x93\x58\x2c\x27\xf3\xf4\xe2\x2c\x2e\x49\x46\x3f\x5d\x29\x9b\xc8\x95\x1c\x55\xb2\x06\x10\x8a\x6c\x11\x57\x7d\x05\x03\x04\xea\x39\xe8\xf6\x0f\x50\xce\xfb\x60\xc7\x91\xb4\x72\x39\x0e\x32\x5a\x7c\x1a\x3a\xe0\x9c\x73\x58\x51\x67\xaf\x18\xda\x05\x24\x09\x2b\x92\xa0\xce\xbc\x6f\x34\x7b\x6f\x31\xf7\x68\x8f\x90\xa6\xae\xf7\x62\x00\x0d\xb4\xf0\xbf\xcd\x86\xf5\x47\x4f\xdf\x99\x4b\x57\x98\x5c\xb7\x59\xf3\x0d\x00\x00\xff\xff\x1c\x35\x5e\xba\x03\x01\x00\x00")

func artifactsClusterConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterConfigmapYaml,
		"artifacts/cluster-configmap.yaml",
	)
}

func artifactsClusterConfigmapYaml() (*asset, error) {
	bytes, err := artifactsClusterConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbd\x4e\x03\x31\x0c\xde\xf3\x14\x7e\x01\x82\xba\xa1\xac\x65\xa3\x20\x01\x12\xbb\x9b\x9a\xab\xd5\x24\x0e\xb6\x53\xd1\xb7\x47\x77\x27\x40\xc0\xc0\x66\x7f\x3f\xfa\x3e\x1b\x3b\xbf\x90\x1a\x4b\x4b\x80\x9d\xe9\xdd\xa9\xcd\x9b\xc5\xd3\x8d\x45\x96\xeb\xf3\x66\x4f\x8e\x9b\x70\xe2\x76\x48\xb0\x1d\xe6\x52\x9f\xc8\x64\x68\xa6\x5b\x7a\xe5\xc6\xce\xd2\x42\x25\xc7\x03\x3a\xa6\x00\xd0\xb0\x52\x82\x7a\xb1\xb7\x92\xcb\x30\x27\xb5\x98\x35\x2e\x80\x74\x52\x74\xd1\x38\xa9\x97\x38\xb1\x1f\xc7\x3e\x66\xa9\xc1\x3a\xe5\xd9\x3c\xa9\x8c\x9e\xe0\x5f\xfd\x1a\x63\xb3\x05\x60\x2d\x77\x7f\x79\x7e\xdc\x6d\xd7\xc4\x05\x2e\x6c\x7e\xf7\x87\xda\xb1\xf9\x42\x1b\xb7\x69\x14\xd4\x9f\x5d\x17\xaa\x97\xa1\x58\x7e\x1d\xb1\x9a\x8e\xa2\xfe\xf0\x1d\x7d\x05\x35\x7f\x0d\xb3\xc4\xb2\x74\x4a\xb0\x48\x3a\x66\x3a\x04\x80\xf3\xe7\x8b\xcf\x9b\xf0\x11\x00\x00\xff\xff\xdd\x99\x29\xdc\x72\x01\x00\x00")

func artifactsClusterCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterCrdYaml,
		"artifacts/cluster-crd.yaml",
	)
}

func artifactsClusterCrdYaml() (*asset, error) {
	bytes, err := artifactsClusterCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterServiceReadYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xfd\x81\x1a\xaa\x4a\x1c\x72\x85\x4b\x25\xa8\x4a\x23\xb8\xbb\xce\x10\x2c\x1c\xdb\xac\x37\x41\x55\xd5\x7f\x47\x76\x02\xf4\x82\x0f\x3e\xec\xcc\xec\x3c\xad\x49\xee\x15\x9c\x5d\x0c\x0d\x4d\x6b\xf5\xe1\x42\xd7\x50\x0b\x9e\x9c\x85\x1a\x20\xa6\x33\x62\x1a\x45\x14\xcc\x80\x86\xce\x67\x3a\xc0\x74\x8b\x61\x67\x06\x90\xae\xff\xe5\xa2\x88\xbc\x39\xc2\xe7\xe2\x26\x32\x29\x55\xfb\x95\x1c\xbf\x02\xf8\x80\x37\x30\x82\xc5\xe2\x5b\xd1\xdc\xf9\x74\x6a\x9f\x1f\xef\xfd\x98\x05\x5c\x85\xb2\xe2\x8f\xcd\xb2\x1e\x4e\xf9\xd3\xc7\x04\x36\x12\x59\xf7\x2c\x5e\xf7\x4e\xde\xc7\xa3\xb6\x71\xb8\x99\xd6\x4b\xea\x17\xf4\xaa\xb9\xbc\xd1\x75\xf3\xf8\x65\xfb\x50\xa6\x39\xc1\x16\x84\x14\x59\x2a\xcb\x6a\x89\xd6\x9e\x1a\x2a\xd2\x9c\x69\x13\xac\xde\x47\x96\x9f\x7d\x62\xb8\x87\xec\xab\x61\xb3\xb9\xbd\x53\x44\x76\x86\xdf\xee\x1b\xda\xc5\x00\x45\x94\xe1\x61\x25\xf2\x3f\x17\xf9\x0e\x00\x00\xff\xff\xa3\xea\x58\x65\x7c\x01\x00\x00")

func artifactsClusterServiceReadYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterServiceReadYaml,
		"artifacts/cluster-service-read.yaml",
	)
}

func artifactsClusterServiceReadYaml() (*asset, error) {
	bytes, err := artifactsClusterServiceReadYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-service-read.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xfd\x81\x1a\xaa\x4a\x1c\x72\x85\x4b\x25\xa8\x0a\x11\xdc\x5d\x67\x08\x16\x8e\x6d\xd6\x9b\xa0\xaa\xea\xbf\x23\x3b\x29\xf4\x82\x0f\x3e\xec\xcc\xec\x3c\xad\x49\xee\x0d\x9c\x5d\x0c\x0d\x4d\x6b\xf5\xe9\x42\xd7\x50\x0b\x9e\x9c\x85\x1a\x20\xa6\x33\x62\x1a\x45\x14\xcc\x80\x86\x4e\xa7\x8b\xb8\x33\x03\x48\xd7\xff\x7c\x56\x44\xde\x1c\xe0\x73\x71\x12\x99\x94\xaa\xf5\x4a\x8e\xdf\x01\xfc\x82\x77\x30\x82\xc5\xe2\x5b\xd1\xdc\xf7\x74\x6c\x9f\x1f\xef\xfd\x98\x05\x5c\x85\xb2\xe2\x8f\xcb\xb2\x1e\x8e\xf9\xcb\xc7\x04\x36\x12\x59\xf7\x2c\x5e\xf7\x4e\x3e\xc6\x83\xb6\x71\xb8\x99\xd6\x4b\xea\x17\xf2\xaa\xb9\xbc\xd1\x75\xf3\xf8\x75\xfb\x50\xa6\x39\xc1\x16\x84\x14\x59\x2a\xcb\x6a\x89\xd6\x9e\x1a\x2a\xd2\x9c\x69\x13\xac\xde\x47\x96\xcb\x3e\x31\xdc\x43\xf6\xd5\xb0\xd9\xdc\xde\x29\x22\x3b\xc3\x6f\xf7\x0d\xed\x62\x80\x22\xca\xf0\xb0\x12\xf9\x9f\x8b\xfc\x04\x00\x00\xff\xff\x97\xdb\xcc\x3a\x78\x01\x00\x00")

func artifactsClusterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterServiceYaml,
		"artifacts/cluster-service.yaml",
	)
}

func artifactsClusterServiceYaml() (*asset, error) {
	bytes, err := artifactsClusterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xe1\x72\x1a\x39\x12\xfe\xef\xa7\xe8\x22\xae\x35\xbe\x58\x18\x92\xca\xa5\x8e\x84\x5c\x79\x09\x49\x5c\x67\x1b\x2f\xc3\x26\xb7\xe5\x70\xac\xd0\x34\xa0\xf2\x8c\x34\x91\x34\xd8\x9c\xe3\x7b\xf6\x2b\x8d\x06\xd0\x0c\x83\xe3\xa4\x6a\xaf\x6a\x8f\x1f\x36\x23\xa9\x5b\x5f\x7f\xea\x6e\x75\x0f\x34\xe1\x1f\x51\x69\x2e\x45\x1b\x68\x92\xe8\xe3\x45\x6b\xef\x9a\x8b\xb0\x0d\x81\xa1\x06\xa7\x69\x14\xa0\xd9\x8b\xd1\xd0\x90\x1a\xda\xde\x03\x10\x34\xc6\x36\xdc\xdd\xf9\x0b\x2e\x68\x8c\xd0\xc8\xfe\xde\xdf\xef\x01\xc8\x1b\x81\x6a\x80\x53\x54\x28\x18\x6a\x2b\x06\x40\xc0\x29\x3e\x5f\x06\xbf\x9c\x75\xa3\x54\x1b\x54\xd9\x04\x80\x8f\x82\xa9\x46\xbc\xd4\x5f\x22\x99\xa0\xa2\x46\xaa\xc6\x4c\x99\xa8\x31\xe3\x66\x9e\x4e\x1a\x4c\xc6\x16\xa1\x93\x5a\x23\xf1\x76\xb6\x9f\x94\x87\x6e\xf8\xd7\xd3\xb7\x76\x54\x27\xc8\x2c\x04\x8d\x11\x32\x23\x95\x83\x13\x53\xc3\xe6\x67\x74\x82\x51\x8e\xcf\xc2\x48\xca\xfa\x34\xaa\x05\x67\x78\x51\xb1\x95\xc2\x24\xe2\x8c\x6a\x37\x1e\x24\xc8\x1a\x83\x7c\xc8\x2d\x30\x18\x27\x11\x35\x98\xef\xe7\x71\x68\x3f\x51\x61\xeb\xca\xcd\x01\x56\xd0\xed\x87\x0b\x6e\xba\x52\x18\xca\x05\xaa\xb5\x20\xc9\x69\xb0\xb3\x24\x23\x6e\xad\x91\xc7\x74\x86\x1e\xba\x53\xfb\xbc\xa1\x09\x80\xc9\x38\xa6\x22\xdc\x60\x20\x30\xa1\x7a\xee\x3d\xd6\x08\xab\x79\x8f\x5f\xd7\xdf\x2d\x33\x06\x08\xde\x7a\x23\x4f\xe0\x3d\x0a\x7b\x68\x08\x19\x90\x8c\x3c\x54\x84\x87\x30\x55\x32\x86\x44\x86\x20\x55\xc8\x05\x8d\x80\x8b\x10\x6f\x1b\x9e\xf0\xd5\x15\xfc\x3e\x97\xda\x58\x6b\x7e\x87\xce\x7f\x80\xd4\xaf\x9a\xe4\x6f\xa3\xa7\x87\xfb\x30\x1a\xc1\xd7\xaf\x80\xb7\xdc\x40\xcb\x13\xc9\x75\x75\xf6\xef\x7e\x3e\x09\x3e\x8c\x07\xbd\xf3\x93\x61\xf7\xc3\x55\x6b\x74\xef\x2d\x42\x36\x97\x70\x95\xe1\x09\x47\xf0\x06\x8e\x63\x61\x8e\x99\x14\xd3\x46\x78\xbc\xc6\xd7\x60\x62\x5a\x30\xe4\x24\x0c\x81\x0a\x90\xd3\xa9\x35\xd3\x48\xa0\x0b\xc9\x43\x50\x98\x89\x84\x1b\xcb\x3a\x4d\x58\xd0\x28\xc5\x46\x79\xcb\xcd\x8a\xfd\x7a\xbd\xd5\x6c\xc2\x53\xd8\xcf\x01\x1f\x1e\xc2\x9b\xc7\x02\xe9\xca\x64\x69\x5d\x43\xc9\x44\x71\xcb\xac\x93\x80\x29\x8f\x50\x3b\x5a\xed\x08\x9f\x91\x98\x26\x16\x28\xc6\x89\x59\xbe\xe5\xca\x07\xc4\xa7\x96\xde\xd5\xf6\x40\xf0\x0b\x34\x61\x34\x7a\x05\x66\x8e\xc2\x5b\x07\xc0\x92\x0d\x2e\xa7\xf3\x38\xa6\x36\x50\x2d\xb0\x02\x64\xdf\xde\x48\xe3\xb7\xb4\xe8\x88\x2e\xf0\x21\x25\x53\xbe\x7e\x58\xc8\x28\x8d\xf1\x5c\xa6\xc2\x68\xdf\x37\x9d\xa3\x5b\x51\x4f\x2e\xb6\xcb\x2e\xa9\x99\xb7\x7d\xcd\x95\x52\x0e\xca\x37\x64\x0b\x8b\xd6\xd2\x91\x14\x58\x1d\x5d\x36\x3b\x1d\xdf\x1a\x45\x27\x94\x5d\xa7\x49\xdb\x06\xbc\x36\x7f\x5c\x88\x05\xd7\x3c\xb1\xe7\xe6\x30\xd9\xa3\xb5\x49\x05\x68\xa4\x90\x86\x4b\x1b\x24\xda\xe8\x52\x60\x91\x10\x8e\x17\x54\x1d\x47\x7c\x72\x9c\x19\xe1\xfe\xda\xb8\xfa\xe9\x27\x17\x57\xcd\xff\x41\x28\x3e\x81\x01\x6a\x23\x15\x3a\xc8\x99\xf3\x3a\xd6\x40\x0a\xc8\xfd\xec\x87\xdc\xf6\xee\xce\x2e\x16\x98\x27\xba\x77\x4a\xc6\x3f\x67\x8a\x1b\xee\x5f\x96\x52\x6b\x35\x3f\xf7\xfd\x08\x20\x80\xcd\x41\x03\x21\x89\xc2\x84\x2a\x04\x42\x0c\x55\x33\x34\x24\xe4\xaa\x93\x13\xec\x16\x1d\xef\x16\x66\x32\x59\x12\xfb\xf4\x68\xf1\xbb\x3b\x40\x11\x6e\xdb\x50\xf2\x88\x35\x72\xa8\x17\x92\x2d\x34\x0f\x8b\xb6\x6c\x9d\xbb\x17\x82\x59\xea\xc9\xd4\x6d\x98\x49\x14\x2e\xb8\x4c\x35\x24\x58\xa4\x45\x30\x6a\x80\x10\x85\x6c\x41\xa4\x88\x96\xfe\x2d\x46\xf6\xeb\xf5\xd5\x09\x92\xd6\xe1\x61\xc3\x9b\x83\xe7\xcf\x9b\x2f\xe1\x2b\xdc\x4e\xb4\x51\x48\x63\x20\xb7\x40\xba\x25\x57\x2d\x40\xba\xcc\x19\xb7\xd6\x3a\x8a\x7c\x1c\x8f\x38\x9c\x6a\xd5\x0f\x27\x1c\xcb\xc0\x8e\xa4\xb1\x0b\xa9\x4e\x27\x6e\x45\x71\xe2\x11\x29\x0c\x0d\xcb\x5d\xa0\x94\xc8\x7e\xc0\xc5\x57\xdb\x29\xe7\xe4\xbb\x12\x9f\xe7\x70\x55\x26\xac\xcb\x07\x6f\xcb\x53\xa1\x0d\x15\xac\x50\x4c\x94\xdd\x93\xed\x2c\x55\xbe\xb3\x4a\x41\xb1\xd8\x3e\x94\xf3\xdf\x82\x5f\xce\xc6\x83\x7e\x7f\x38\xbe\x3c\x09\x82\x4f\xfd\xc1\x5b\x0f\x7c\x76\x25\x5b\xbc\xed\x82\xc7\x6b\x64\x0a\xcd\x3f\x70\x39\xc0\x69\x71\xc6\x2f\x26\x33\x14\x41\xb6\xb4\x1c\x6c\x00\xd7\xb8\x6c\x43\x42\xb5\xbe\x91\x6a\x73\x38\x89\x54\x55\x9e\x53\x76\x8b\x35\x25\x97\x52\x99\xb6\x75\xff\xbf\xfe\xa9\x7c\x50\xa1\x96\xa9\x5a\x17\xf4\xab\xc1\x2f\x29\x6a\xa3\xdb\xa5\x12\x20\x6d\xc3\x8b\x66\x33\x2e\x8c\xc6\x18\x4b\xb5\x6c\x43\xeb\xfd\x26\xd5\x44\x7c\x81\x02\xb5\xbe\x54\x72\x82\xbe\x12\xbc\xdd\xd4\xbe\x2b\xfe\xdc\x65\x0a\x57\x35\x7b\x89\xd6\x8e\xb2\xcb\xf3\x08\x6a\x19\x5a\x1a\xc6\x5c\x40\xc2\xc5\x0c\x48\xf2\xb9\xb6\x7f\x57\xe1\x23\xf7\x9f\x6b\xb5\x91\x7f\xc5\x08\x6e\x38\x8d\xde\x62\x44\x97\x01\x32\x29\x42\xdd\x86\xe7\x7e\x52\x4c\x50\x71\x19\xae\xe7\x5a\xfe\x9c\xe1\x31\xca\xd4\xac\x27\x5f\x78\x4c\xd1\x90\x3f\xd2\xaa\x27\xd0\x9d\x23\xbb\x86\x1b\x04\x46\x45\xb6\x20\x35\x08\x5f\x52\x54\x1c\x35\xc8\x05\x2a\x18\x76\x2f\xa1\xae\xaf\x79\x42\x04\x9a\x1b\xa9\xae\xad\x95\x5c\xdb\x02\xb5\x94\xd5\x1f\xe6\x08\xc8\x1c\x5a\xcf\x5e\x36\x9a\x8d\x66\xa3\xf5\x20\x4d\x40\x10\x0e\x82\xde\x59\xaf\x3b\x84\xd6\xc1\xb7\x49\x7b\xb1\x9b\xb3\x67\x0f\x50\xd6\x2a\xe5\x86\x4d\x0e\xff\xce\x42\xeb\xcf\x9b\x25\x2a\x4c\xae\x4a\x15\x2f\xff\xa8\x9a\x92\x95\xab\xc3\xbd\xc2\x9d\xfb\x16\x0d\xaa\x98\x0b\x84\x09\x17\x91\x9c\x41\x22\x35\x37\x5c\xda\xee\xc8\x95\x1c\x61\x96\x9e\x8e\xec\xfd\x44\xc5\x72\xbb\x82\x23\x53\xcf\xc6\x71\xd6\x09\x8c\xb9\x98\xca\xea\x5a\xee\x09\xfc\xd3\x28\xea\x2e\x9a\x75\x59\x3b\xcb\x1b\xcb\x10\x28\x24\x54\x59\xf7\x83\x5a\xf7\xc3\xc9\xc5\xfb\x1e\x9c\x9f\x04\xc3\xde\x00\x86\xfd\x5a\x16\x33\xcb\x92\xb6\x09\x32\x9a\x6a\x84\x1b\x3c\x50\xae\x46\xb2\xb1\x93\x55\x34\x59\xb4\x71\x6d\xec\x80\x6b\x50\x8a\xd9\x6a\xb1\x03\x37\x9b\x53\x31\xc3\xb1\x2b\xb3\xc6\x46\x36\xf4\x97\xa8\xc1\xcb\x66\x9c\xce\x84\x2d\x2d\x3d\x15\x8e\x40\xa7\x83\x0b\x30\x73\xae\x81\x51\x8d\x50\xe7\xe6\x40\x43\xaa\x31\x42\xad\x4b\x01\xad\xe2\x12\x81\x9e\x96\x42\x13\x56\x45\xb6\xbf\xe3\x0e\xb6\x3f\x15\x78\x09\xb9\x42\x66\xa2\xa5\x23\x28\x2f\x81\xe1\x92\x2a\xbd\x75\xfe\x45\x98\xb6\x69\xb0\x75\x60\xf5\xe6\x59\x1b\xf1\xaf\x7a\xe3\x2f\x7f\x3f\xbc\xba\x6a\xeb\x84\x32\x6c\x8f\x46\x4f\xb3\x81\x9d\x4d\x45\x66\xfb\x37\x0d\xcf\xfb\xed\x2d\x6f\xc8\xbf\x8d\xcf\xfa\xef\xc7\xef\x4e\xcf\x7a\x9d\x83\xed\xe6\xe4\xe0\xe8\x73\x29\x72\xed\xc7\x13\xbc\xec\x07\xe5\x9e\xe6\xd9\xe8\xbe\x06\x6f\x1e\xe1\x03\x53\x5e\x0c\x24\x97\xe5\xf9\xd4\x26\x7a\x81\x18\xda\x6e\x9d\xc9\x38\x89\xd0\x20\xd0\xbc\x7a\x9f\x2c\x41\x1b\xeb\xe0\x62\xb6\x7a\xc1\x54\xe6\x7a\x7d\xce\x3b\x20\x54\x1f\xb4\x23\xe9\x13\xe5\x99\xea\xa9\x54\xae\x2e\xc8\x50\x4c\x10\x5c\x98\xd5\x29\x63\x98\x64\x2b\x98\x14\x02\x99\xdd\x5b\x1f\xd6\x0a\x9a\x52\x61\x78\x04\x95\xd7\xc9\x8e\xdb\x24\xbb\x4c\x6a\xab\xcb\xa4\xf6\x0a\x42\x09\x3a\x42\x4c\xa0\x65\xbf\x0b\xdc\xab\x80\x7a\xea\x6e\x19\xfe\xef\x12\x15\xf9\x4b\x8f\x8c\xad\x95\x2b\xd6\xca\xa1\x27\x5c\x5c\xd9\x0c\xb5\x4a\xa4\x59\x19\x4c\x95\x39\x02\x6a\x0c\xc6\x89\x71\xf1\x47\x0d\x89\xa5\x36\x44\x0a\xb6\x1d\xfe\xbb\x18\xae\x1c\x97\x8a\xcf\x8a\x0a\xbe\x8b\xa2\xd7\xaf\x7b\xfd\x77\x9e\xfc\x7e\xfd\xf5\xce\x6d\x0e\x8f\xf6\x2a\x1c\xf6\x43\x3f\x18\x76\x0e\xfc\xe6\xab\xe9\xb7\x5b\x07\x95\x42\xbf\x06\xbd\x41\xe7\x40\x49\x69\xaa\xe7\x57\x08\x6d\xf8\x54\x01\xaf\x96\xea\xf6\x2f\x2e\x7a\xdd\xe1\x78\xd0\x1b\x0e\x7e\xeb\xb4\x9a\xaf\xbc\x45\xc1\xf0\x64\x30\x84\xe0\xec\xe4\x63\xcf\x1f\x2e\x5a\x5f\x0e\x9e\xc0\x1e\x1d\xd0\xfc\xb5\x9a\x75\x5a\x6d\xbb\x0d\x97\x19\x34\xdc\xcc\x51\xac\x2a\x51\x0c\x6d\x14\xd9\x26\xb5\xf0\x1e\xc4\xd6\x55\xab\x56\x35\xe2\xda\xa0\x00\x42\xae\x11\x13\x22\x93\xec\xbb\x55\xe8\xfa\x57\x42\x62\x7a\x4b\x6c\x04\xe8\x4e\xcb\x75\xa9\x84\x41\x31\x55\xd4\x0a\xdd\xe6\xfa\x4b\x76\x4b\x90\x2c\xdf\x12\xe2\xda\xda\xce\xa6\xbf\x25\x73\xa9\x4d\xc7\x73\x07\x92\x6a\x54\x1d\xcb\xbe\x6d\x59\xf3\x82\xa1\xf3\x40\xf1\xfa\x7f\xdd\x2f\xb4\x76\xf6\x0b\xcd\xe6\xf9\xaa\x63\x70\x86\x6f\x35\x95\x05\x7c\xab\x97\xa0\x6d\xb8\xbb\xaf\x58\x57\x7a\x11\xe8\x86\xce\x69\xe2\x43\xda\xee\xe0\xbe\xbb\x03\xdf\xd5\x7f\x27\xa8\x74\xe6\x80\xe6\x63\x66\x4b\x37\xa2\xbc\x50\x83\x32\x3b\x70\x51\x2c\x35\xab\xb7\x5b\xef\xe5\x77\xdf\x8b\x8d\xd6\x61\xfe\x13\x44\x46\x17\xd9\xfa\x0d\x62\xcb\x59\xbe\xfb\x47\x09\x7b\x61\x68\x7d\x2e\x43\xd4\xb6\xe5\x18\x20\x0d\x3f\x29\x6e\xb0\x2f\x18\xae\x9b\x86\x0a\x3f\xa8\xf2\x02\xcb\x52\xf1\x5d\x40\xe0\x46\xec\xc6\xff\x0d\x00\x00\xff\xff\xac\x14\x1d\x9b\xa9\x1a\x00\x00")

func artifactsClusterStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterStatefulsetYaml,
		"artifacts/cluster-statefulset.yaml",
	)
}

func artifactsClusterStatefulsetYaml() (*asset, error) {
	bytes, err := artifactsClusterStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-statefulset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"artifacts/backupinstance-crd.yaml":        artifactsBackupinstanceCrdYaml,
	"artifacts/backupinstance-job-create.yaml": artifactsBackupinstanceJobCreateYaml,
	"artifacts/backupinstance-job-delete.yaml": artifactsBackupinstanceJobDeleteYaml,
	"artifacts/backupschedule-crd.yaml":        artifactsBackupscheduleCrdYaml,
	"artifacts/backupschedule-cronjob.yaml":    artifactsBackupscheduleCronjobYaml,
	"artifacts/backupschedule-pvc.yaml":        artifactsBackupschedulePvcYaml,
	"artifacts/cluster-configmap.yaml":         artifactsClusterConfigmapYaml,
	"artifacts/cluster-crd.yaml":               artifactsClusterCrdYaml,
	"artifacts/cluster-service-read.yaml":      artifactsClusterServiceReadYaml,
	"artifacts/cluster-service.yaml":           artifactsClusterServiceYaml,
	"artifacts/cluster-statefulset.yaml":       artifactsClusterStatefulsetYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"artifacts": {nil, map[string]*bintree{
		"backupinstance-crd.yaml":        {artifactsBackupinstanceCrdYaml, map[string]*bintree{}},
		"backupinstance-job-create.yaml": {artifactsBackupinstanceJobCreateYaml, map[string]*bintree{}},
		"backupinstance-job-delete.yaml": {artifactsBackupinstanceJobDeleteYaml, map[string]*bintree{}},
		"backupschedule-crd.yaml":        {artifactsBackupscheduleCrdYaml, map[string]*bintree{}},
		"backupschedule-cronjob.yaml":    {artifactsBackupscheduleCronjobYaml, map[string]*bintree{}},
		"backupschedule-pvc.yaml":        {artifactsBackupschedulePvcYaml, map[string]*bintree{}},
		"cluster-configmap.yaml":         {artifactsClusterConfigmapYaml, map[string]*bintree{}},
		"cluster-crd.yaml":               {artifactsClusterCrdYaml, map[string]*bintree{}},
		"cluster-service-read.yaml":      {artifactsClusterServiceReadYaml, map[string]*bintree{}},
		"cluster-service.yaml":           {artifactsClusterServiceYaml, map[string]*bintree{}},
		"cluster-statefulset.yaml":       {artifactsClusterStatefulsetYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
