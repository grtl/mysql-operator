// Code generated by go-bindata.
// sources:
// artifacts/backupinstance-crd.yaml
// artifacts/backupinstance-job-create.yaml
// artifacts/backupinstance-job-delete.yaml
// artifacts/backupschedule-crd.yaml
// artifacts/backupschedule-cronjob.yaml
// artifacts/backupschedule-pvc.yaml
// artifacts/cluster-configmap.yaml
// artifacts/cluster-crd.yaml
// artifacts/cluster-service-read.yaml
// artifacts/cluster-service.yaml
// artifacts/cluster-statefulset.yaml
// DO NOT EDIT!

package artifacts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _artifactsBackupinstanceCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4b\x4e\xc4\x30\x0c\x86\xf7\x39\x85\x2f\x40\x50\x77\x28\x4b\x60\x83\x18\x90\x00\x89\xbd\x9b\x9a\x8e\xd5\xbc\x88\x9d\x8a\xb9\x3d\x6a\x0a\x9a\xcd\x20\x76\x79\x7c\xfe\x1f\x32\x16\x7e\xa7\x2a\x9c\x93\x03\x2c\x4c\x5f\x4a\x69\xbb\x89\x5d\x6e\xc4\x72\xbe\x5e\x87\x91\x14\x07\xb3\x70\x9a\x1c\xdc\x35\xd1\x1c\x5f\x49\x72\xab\x9e\xee\xe9\x83\x13\x2b\xe7\x64\x22\x29\x4e\xa8\xe8\x0c\x40\xc2\x48\x0e\xe2\x49\x3e\xc3\x88\x7e\x69\x85\x93\x28\x26\x4f\x62\x7d\xb5\xfd\x3d\x17\xaa\xa8\xb9\xda\xb9\x6a\xb0\x33\xeb\xb1\x8d\xd6\xe7\x68\xa4\x90\xdf\x34\xe6\x9a\x5b\x71\xf0\x2f\xbf\xbb\xc9\x36\x02\xb0\x67\x7c\x3a\xbd\xbd\x1c\x6e\xbb\xf1\xc3\x8f\x71\xff\x0d\x2c\xfa\xf8\x17\x71\x60\xd1\x4e\x09\xa7\xb9\x05\xac\x17\x0b\x74\xa2\x84\x56\x31\x5c\x2e\xb8\x4b\x1c\x73\xd5\xe7\x73\xac\x2b\x88\x23\x9f\x4f\x1b\x24\x3e\x17\x72\xd0\xa1\x82\x9e\x26\x03\xb0\xfe\xee\x61\x1d\xcc\x77\x00\x00\x00\xff\xff\x07\x47\x8e\xe5\x97\x01\x00\x00")

func artifactsBackupinstanceCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupinstanceCrdYaml,
		"artifacts/backupinstance-crd.yaml",
	)
}

func artifactsBackupinstanceCrdYaml() (*asset, error) {
	bytes, err := artifactsBackupinstanceCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupinstance-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupinstanceJobCreateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x6b\x1b\x31\x10\xbd\xef\xaf\x18\xb6\x05\x9f\x64\x3b\xe4\x50\x10\xe4\xd0\x6e\x28\xb4\x25\xa9\x69\x68\xae\x65\xac\x9d\xd8\xc2\xfa\x8a\x34\x1b\x6c\x9c\xfd\xef\x45\xbb\x76\x2c\xa7\x29\x3d\xd5\x07\xb3\x7a\xf3\x46\xef\x49\x6f\x84\x41\xdf\x53\x4c\xda\x3b\x09\x4b\x64\xb5\x9e\x3d\x5d\x54\x1b\xed\x5a\x09\x5f\xfd\xb2\xb2\xc4\xd8\x22\xa3\xac\x00\x1c\x5a\x92\xb0\xdf\xe7\x42\x13\x09\x99\x6e\xd1\x12\x4c\x87\xff\xbe\xaf\x52\x20\x95\x79\x4c\x36\x18\x64\xca\xdf\x00\x47\x34\xff\x22\x25\xc6\xc8\x0b\x6f\xb4\xda\x49\xf8\xee\x3e\xa3\x36\x5d\xa4\x43\xf9\xc9\x9b\xce\x52\x3a\xb2\xc5\x41\x71\x89\x6a\xd3\x85\x03\x08\x10\xb2\xdd\xc4\xe4\xf8\x7e\xe0\x37\x06\xb5\x95\x2f\x65\x00\x95\x81\xdb\xa3\xd9\xc5\x7d\x33\xda\xbc\x0b\xa4\xa6\x77\x6a\x4d\x6d\x67\x06\xbf\xe7\x2a\xca\xbb\x87\x97\x4d\xc8\x06\xde\x5d\xeb\x28\x61\xff\x16\x4f\xaf\x84\xc5\x93\xa3\x11\xba\xc1\x50\xba\x18\xd9\x76\x97\x1e\x4d\xf5\x42\x63\xd4\x8e\xe2\xbf\x4e\xa8\x2d\xae\x48\xc2\x2a\xb2\x99\x6d\x39\xe2\x58\x96\xf9\x4e\x13\x17\xaa\xd6\xa2\x6b\x4f\x9a\x02\x96\x98\xd6\xc5\xb2\x16\xaa\x2e\x96\xcf\x85\xbb\x44\x0c\x82\xb6\x55\x01\x6d\xba\x25\x29\x36\x10\xf2\x14\x8c\xc6\x47\x61\xed\x12\xa3\x53\x94\x6f\xf3\x18\x36\x08\xc1\xbb\x40\x57\x13\x4b\x71\x45\x13\x10\x62\x6c\x9b\xec\xeb\xc4\xc8\x5d\xaa\x25\xec\xeb\xb0\xc6\x44\xb5\x84\xfa\x2e\xc7\x4e\x6d\xdd\xf7\x93\x52\xf2\xd3\xc7\xe6\xdb\xcf\xc5\xaf\xeb\x2f\x3f\xae\xea\xd9\xa0\x38\x1b\x25\x67\x85\x54\x5d\x76\xbc\x83\xc6\x78\x47\x90\x67\x12\x1e\xa2\xb7\x60\x31\x31\xc5\x69\xc1\xb1\x9b\x56\x47\x10\x01\xde\xef\x4f\x02\x7d\x19\x8d\x42\x06\x21\x22\xa9\x27\xe1\x9d\xd9\x0d\x07\x1b\xc6\xa3\x31\x5d\xde\x0d\xfa\x5e\xcc\xa7\x6f\xa0\x70\x79\x39\xff\x00\xcf\xb0\x5d\x26\x8e\x84\x16\xc4\x16\x44\xf3\x4a\xe8\xcc\xee\x22\x52\xc0\x48\xc0\x6b\x3a\xc4\x5c\x5a\x3d\xa5\x9b\x6f\xf0\x40\x15\x82\x31\xae\x88\x45\xab\xe3\xd5\x5f\xb7\xfe\x9f\x71\x35\xde\x06\x43\xc7\xc0\x8e\x8a\xe3\xf3\xbc\xf1\x9d\xe3\x54\x4e\xdd\x9b\x33\x0c\x60\x33\x71\x81\xbc\x96\x70\x9e\xed\x1f\xad\x67\x4f\xef\xbc\x91\x58\x1d\x9a\x33\x69\xda\x16\xb4\x48\xc9\x77\x51\x51\x2a\x5f\x5d\x86\x1f\x3b\x4a\xfc\x0a\x05\x50\xa1\x93\x70\x31\x9f\xdb\x57\xb8\x25\xeb\xe3\x6e\x28\xdd\xe8\xea\x77\x00\x00\x00\xff\xff\x96\xba\x06\xc9\x0f\x05\x00\x00")

func artifactsBackupinstanceJobCreateYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupinstanceJobCreateYaml,
		"artifacts/backupinstance-job-create.yaml",
	)
}

func artifactsBackupinstanceJobCreateYaml() (*asset, error) {
	bytes, err := artifactsBackupinstanceJobCreateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupinstance-job-create.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupinstanceJobDeleteYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x6b\xf3\x30\x0c\x87\xef\xf9\x14\xa2\xf7\x36\xbc\x57\x5f\xfb\xb2\xc3\x60\x5d\xa1\x90\xbb\xe2\x88\xc5\xd4\xb2\x3d\x5b\x2e\x0b\xa1\xdf\x7d\x38\x7f\xda\x30\x06\xcb\x21\x58\x3f\x3d\x48\x0f\xc2\x60\x1a\x8a\xc9\x78\xa7\xa0\x45\xd1\x7d\x7d\xfb\x57\x5d\x8d\xeb\x14\xbc\xfa\xb6\x62\x12\xec\x50\x50\x55\x00\x0e\x99\x14\x8c\x63\x69\xfc\x27\x4b\x42\x27\x64\x82\xc3\xf4\xbf\xdf\xab\x14\x48\x17\x4e\x88\x83\x45\xa1\xf2\x06\x58\xd3\xf2\x45\x4a\x82\x51\xce\xde\x1a\x3d\x28\x78\x77\x2f\x68\x6c\x8e\xb4\xb4\x6f\xde\x66\xa6\xb4\xd2\xfb\x65\x63\x8b\xfa\x9a\xc3\x12\x02\x84\xa2\x9b\x84\x9c\x34\x13\x7f\xb4\x68\x58\x3d\xda\x00\xba\x04\xa7\x55\xf6\xdc\x1c\x67\xcd\x4b\x20\x7d\xb8\xe8\x9e\xba\x6c\x27\xdf\x85\xf6\x4e\xd0\x38\x8a\x7f\xed\x35\x8c\x1f\x25\xcd\x69\x68\xfd\xd7\x23\xd6\x9e\x19\x5d\xf7\x14\xd8\x43\xe4\x4d\xb1\xdb\xc7\xdd\xa6\xac\x79\x48\x9f\xb6\x9e\x67\xd7\xe3\xf8\x3c\xdf\xca\xcc\x57\x78\xf3\xd9\x49\xda\x4e\xfd\x55\x0a\x80\x0b\x78\x46\xe9\xd5\x8f\xd9\xd5\x77\x00\x00\x00\xff\xff\x4e\xbc\xa8\xab\xdb\x01\x00\x00")

func artifactsBackupinstanceJobDeleteYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupinstanceJobDeleteYaml,
		"artifacts/backupinstance-job-delete.yaml",
	)
}

func artifactsBackupinstanceJobDeleteYaml() (*asset, error) {
	bytes, err := artifactsBackupinstanceJobDeleteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupinstance-job-delete.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupscheduleCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc9\x4e\xc4\x30\x0c\x86\xef\x79\x0a\xbf\x00\x41\x73\x43\x39\x02\x37\x06\x24\x18\x89\xbb\x9b\x9a\xd6\x6a\x36\x62\xa7\x62\xde\x1e\x35\x65\xb9\x0c\xe2\x96\xe5\xf3\xbf\xc8\x58\xf8\x95\xaa\x70\x4e\x0e\xb0\x30\x7d\x28\xa5\xed\x26\x76\xb9\x11\xcb\xf9\x7a\x3d\x0c\xa4\x78\x30\x0b\xa7\xd1\xc1\x5d\x13\xcd\xf1\x85\x24\xb7\xea\xe9\x9e\xde\x38\xb1\x72\x4e\x26\x92\xe2\x88\x8a\xce\x00\x24\x8c\xe4\x20\x9e\xe5\x3d\x0c\xe8\x97\x56\xc4\xcf\x34\xb6\x40\x62\x7d\xb5\xfd\x3d\x17\xaa\xa8\xb9\xda\xa9\x6a\xb0\x13\xeb\xdc\x06\xeb\x73\x34\x52\xc8\x6f\x1a\x53\xcd\xad\x38\xf8\x97\xdf\xdd\x64\x1b\x01\xd8\x33\x3e\x9e\x4f\xcf\xc7\xdb\x6e\x7c\xfa\x32\xee\xbf\x81\x45\x1f\xfe\x22\x8e\x2c\xda\x29\xe1\x34\xb5\x80\xf5\x62\x81\x4e\x94\xd0\x2a\x86\xcb\x05\x77\x89\x39\x57\x7d\xfa\x8d\x75\x05\x71\xf8\x39\x6c\x88\xf8\x5c\xc8\x41\x47\x0a\x7a\x1a\x0d\xc0\xfa\xbd\x85\xf5\x60\x3e\x03\x00\x00\xff\xff\x89\xa9\x99\xc4\x95\x01\x00\x00")

func artifactsBackupscheduleCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupscheduleCrdYaml,
		"artifacts/backupschedule-crd.yaml",
	)
}

func artifactsBackupscheduleCrdYaml() (*asset, error) {
	bytes, err := artifactsBackupscheduleCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupschedule-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupscheduleCronjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4b\x6f\xd3\x40\x10\xbe\xfb\x57\x8c\x22\x59\x3d\xa0\x75\x94\x1b\xb2\x7a\xa2\x34\xa2\x88\x92\x42\x0a\x12\xb7\x8e\xd7\x93\x78\xc9\x3e\xcc\xee\x38\x10\xb5\xfd\xef\x68\xed\x24\xf2\x83\x4b\x98\x83\x25\x7f\x8f\x9d\x99\xf5\x67\xac\xd5\x77\xf2\x41\x39\x9b\x43\x81\x2c\xab\xf9\x7e\x51\x10\xe3\x22\xd9\x29\x5b\xe6\x70\xe3\x9d\xfd\xe8\x8a\xc4\x10\x63\x89\x8c\x79\x02\x60\xd1\x50\x0e\xcf\xcf\x27\xf2\x33\x1a\x82\xac\x7d\xbe\xbe\x26\x00\xee\xb7\x25\xff\x95\x36\xe4\xc9\x4a\x0a\xd1\x02\x20\xa0\x3b\xf0\xfe\xb0\xfe\xf2\xe9\x1d\xca\x5d\x53\xaf\x65\x45\x65\xa3\xa9\xe5\x01\xfa\xa3\x48\x9f\x99\x43\xf8\xa5\x5d\x4d\x1e\xd9\xf9\x6c\xeb\x59\x67\x5b\xc5\x55\x53\x64\xd2\x99\xf9\x7e\x71\x74\x9d\x87\xe9\x0d\x10\xab\x51\x65\x07\x7f\xbb\x7b\x1f\xd1\x50\x93\x8c\x93\x84\x63\xd3\x1c\x66\x91\x5d\xd7\x24\xb3\x47\xd5\x3a\x67\x09\xc0\x4f\x57\x3c\x92\xa9\x35\x32\x75\x73\x9f\x7c\xb1\x78\xc0\x8c\xd9\x58\x9e\x02\xa3\xe7\x07\xa7\x95\x3c\xe4\xb0\xb2\x4b\x54\xba\xf1\xd4\x93\x48\x67\x19\x95\x25\x1f\xfa\x46\x71\x5c\xa4\x68\x6f\xa6\x47\x00\x28\x83\x5b\xca\x41\xa3\xac\x34\x5a\xda\x93\x0d\xce\xce\x77\x6f\x83\xd8\x35\x05\x49\xd6\x03\xb5\x74\xc6\xa0\x2d\xf3\x01\x28\x20\x54\x23\x60\x26\xe4\x6c\x04\xbd\x0c\xde\x01\x24\x32\x5c\x5f\xc3\xed\x6a\x09\x2f\x70\xec\x05\xd2\x13\x32\x81\xd8\x80\x18\xc9\xff\xef\xfb\x9d\x6a\x92\x8e\x3b\x1b\x18\xad\xa4\x91\xae\x1f\xc4\x61\x9d\x93\x30\xf4\xc7\x58\x3c\x78\xda\xa8\x3f\xe7\x88\x88\xa7\x32\xee\x70\xf5\x26\xfd\x21\x52\x23\xd2\x52\xa4\x1f\x44\x7a\x2f\xd2\xf5\xd5\xd3\xe4\x58\x8d\x05\xe9\x30\x6d\xd7\x8f\xd2\x34\x7e\x83\x7b\xd4\x4d\x60\xf2\x9d\xac\x0d\xdc\x4d\x87\x4c\xe5\xe3\x3c\x5d\xd2\xe8\x92\x36\x8c\xdc\xfc\x63\xa7\xba\xc2\x40\x39\x9c\x7e\xcc\x72\x24\xb8\x5d\x2d\x93\xbf\x01\x00\x00\xff\xff\x64\xc6\xd7\x96\x31\x04\x00\x00")

func artifactsBackupscheduleCronjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupscheduleCronjobYaml,
		"artifacts/backupschedule-cronjob.yaml",
	)
}

func artifactsBackupscheduleCronjobYaml() (*asset, error) {
	bytes, err := artifactsBackupscheduleCronjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupschedule-cronjob.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupschedulePvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x8a\xc3\x30\x10\x45\x7b\x9d\xe2\x5f\x60\x0d\xdb\xaa\x75\xed\xc5\xac\xc1\xa9\x07\xe9\x13\x44\x2c\xc9\xd1\xc8\x81\x60\x7c\xf7\xa0\x38\x69\x06\xde\xfc\x07\xef\x16\x92\xb7\x18\x59\x34\x68\x65\xaa\x73\x5e\xb6\xc8\x7e\x91\x10\x8d\xac\x61\x6e\x43\x4e\x16\x8f\x5f\x13\x59\xc5\x4b\x15\x6b\x80\x24\x91\x16\xfb\x8e\x71\xee\xff\x24\x12\xdd\xfb\x1e\x87\xd1\x95\xae\x19\xe2\x1c\x55\x87\xec\xa9\x0d\x81\x1f\xfc\x53\xfc\xa5\x84\xca\x41\xd2\xd3\x00\x85\x9a\xb7\xe2\xbe\x42\xe1\x7d\xa3\xd6\x0f\x01\x5a\x73\x91\xeb\x99\xe9\xa6\x95\xae\x9b\xce\x4f\xcb\xbc\x02\x00\x00\xff\xff\x31\xd3\xda\x23\xb8\x00\x00\x00")

func artifactsBackupschedulePvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupschedulePvcYaml,
		"artifacts/backupschedule-pvc.yaml",
	)
}

func artifactsBackupschedulePvcYaml() (*asset, error) {
	bytes, err := artifactsBackupschedulePvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backupschedule-pvc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\x3d\x4f\xf1\x81\x73\x05\xd7\x6c\xe2\xec\xea\x22\x0e\xd7\xe6\xda\x06\x93\x4b\xcc\xc5\x42\xc1\x87\x97\x06\xba\x39\x38\x26\xf7\xbb\xff\x51\xf6\x37\x2e\xea\x93\x58\x2c\x27\xf3\xf4\xe2\x2c\x2e\x49\x46\x3f\x5d\x29\x9b\xc8\x95\x1c\x55\xb2\x06\x10\x8a\x6c\x11\x57\x7d\x05\x03\x04\xea\x39\xe8\xf6\x0f\x50\xce\xfb\x60\xc7\x91\xb4\x72\x39\x0e\x32\x5a\x7c\x1a\x3a\xe0\x9c\x73\x58\x51\x67\xaf\x18\xda\x05\x24\x09\x2b\x92\xa0\xce\xbc\x6f\x34\x7b\x6f\x31\xf7\x68\x8f\x90\xa6\xae\xf7\x62\x00\x0d\xb4\xf0\xbf\xcd\x86\xf5\x47\x4f\xdf\x99\x4b\x57\x98\x5c\xb7\x59\xf3\x0d\x00\x00\xff\xff\x1c\x35\x5e\xba\x03\x01\x00\x00")

func artifactsClusterConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterConfigmapYaml,
		"artifacts/cluster-configmap.yaml",
	)
}

func artifactsClusterConfigmapYaml() (*asset, error) {
	bytes, err := artifactsClusterConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbd\x4e\x03\x31\x0c\xde\xf3\x14\x7e\x01\x82\xba\xa1\xac\x65\xa3\x20\x01\x12\xbb\x9b\x9a\xab\xd5\x24\x0e\xb6\x53\xd1\xb7\x47\x77\x27\x40\xc0\xc0\x66\x7f\x3f\xfa\x3e\x1b\x3b\xbf\x90\x1a\x4b\x4b\x80\x9d\xe9\xdd\xa9\xcd\x9b\xc5\xd3\x8d\x45\x96\xeb\xf3\x66\x4f\x8e\x9b\x70\xe2\x76\x48\xb0\x1d\xe6\x52\x9f\xc8\x64\x68\xa6\x5b\x7a\xe5\xc6\xce\xd2\x42\x25\xc7\x03\x3a\xa6\x00\xd0\xb0\x52\x82\x7a\xb1\xb7\x92\xcb\x30\x27\xb5\x98\x35\x2e\x80\x74\x52\x74\xd1\x38\xa9\x97\x38\xb1\x1f\xc7\x3e\x66\xa9\xc1\x3a\xe5\xd9\x3c\xa9\x8c\x9e\xe0\x5f\xfd\x1a\x63\xb3\x05\x60\x2d\x77\x7f\x79\x7e\xdc\x6d\xd7\xc4\x05\x2e\x6c\x7e\xf7\x87\xda\xb1\xf9\x42\x1b\xb7\x69\x14\xd4\x9f\x5d\x17\xaa\x97\xa1\x58\x7e\x1d\xb1\x9a\x8e\xa2\xfe\xf0\x1d\x7d\x05\x35\x7f\x0d\xb3\xc4\xb2\x74\x4a\xb0\x48\x3a\x66\x3a\x04\x80\xf3\xe7\x8b\xcf\x9b\xf0\x11\x00\x00\xff\xff\xdd\x99\x29\xdc\x72\x01\x00\x00")

func artifactsClusterCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterCrdYaml,
		"artifacts/cluster-crd.yaml",
	)
}

func artifactsClusterCrdYaml() (*asset, error) {
	bytes, err := artifactsClusterCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterServiceReadYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xfd\x81\x1a\xaa\x4a\x1c\x72\x85\x4b\x25\xa8\x4a\x23\xb8\xbb\xce\x10\x2c\x1c\xdb\xac\x37\x41\x55\xd5\x7f\x47\x76\x02\xf4\x82\x0f\x3e\xec\xcc\xec\x3c\xad\x49\xee\x15\x9c\x5d\x0c\x0d\x4d\x6b\xf5\xe1\x42\xd7\x50\x0b\x9e\x9c\x85\x1a\x20\xa6\x33\x62\x1a\x45\x14\xcc\x80\x86\xce\x67\x3a\xc0\x74\x8b\x61\x67\x06\x90\xae\xff\xe5\xa2\x88\xbc\x39\xc2\xe7\xe2\x26\x32\x29\x55\xfb\x95\x1c\xbf\x02\xf8\x80\x37\x30\x82\xc5\xe2\x5b\xd1\xdc\xf9\x74\x6a\x9f\x1f\xef\xfd\x98\x05\x5c\x85\xb2\xe2\x8f\xcd\xb2\x1e\x4e\xf9\xd3\xc7\x04\x36\x12\x59\xf7\x2c\x5e\xf7\x4e\xde\xc7\xa3\xb6\x71\xb8\x99\xd6\x4b\xea\x17\xf4\xaa\xb9\xbc\xd1\x75\xf3\xf8\x65\xfb\x50\xa6\x39\xc1\x16\x84\x14\x59\x2a\xcb\x6a\x89\xd6\x9e\x1a\x2a\xd2\x9c\x69\x13\xac\xde\x47\x96\x9f\x7d\x62\xb8\x87\xec\xab\x61\xb3\xb9\xbd\x53\x44\x76\x86\xdf\xee\x1b\xda\xc5\x00\x45\x94\xe1\x61\x25\xf2\x3f\x17\xf9\x0e\x00\x00\xff\xff\xa3\xea\x58\x65\x7c\x01\x00\x00")

func artifactsClusterServiceReadYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterServiceReadYaml,
		"artifacts/cluster-service-read.yaml",
	)
}

func artifactsClusterServiceReadYaml() (*asset, error) {
	bytes, err := artifactsClusterServiceReadYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-service-read.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\xfd\x81\x1a\xaa\x4a\x1c\x72\x85\x4b\x25\xa8\x0a\x11\xdc\x5d\x67\x08\x16\x8e\x6d\xd6\x9b\xa0\xaa\xea\xbf\x23\x3b\x29\xf4\x82\x0f\x3e\xec\xcc\xec\x3c\xad\x49\xee\x0d\x9c\x5d\x0c\x0d\x4d\x6b\xf5\xe9\x42\xd7\x50\x0b\x9e\x9c\x85\x1a\x20\xa6\x33\x62\x1a\x45\x14\xcc\x80\x86\x4e\xa7\x8b\xb8\x33\x03\x48\xd7\xff\x7c\x56\x44\xde\x1c\xe0\x73\x71\x12\x99\x94\xaa\xf5\x4a\x8e\xdf\x01\xfc\x82\x77\x30\x82\xc5\xe2\x5b\xd1\xdc\xf7\x74\x6c\x9f\x1f\xef\xfd\x98\x05\x5c\x85\xb2\xe2\x8f\xcb\xb2\x1e\x8e\xf9\xcb\xc7\x04\x36\x12\x59\xf7\x2c\x5e\xf7\x4e\x3e\xc6\x83\xb6\x71\xb8\x99\xd6\x4b\xea\x17\xf2\xaa\xb9\xbc\xd1\x75\xf3\xf8\x75\xfb\x50\xa6\x39\xc1\x16\x84\x14\x59\x2a\xcb\x6a\x89\xd6\x9e\x1a\x2a\xd2\x9c\x69\x13\xac\xde\x47\x96\xcb\x3e\x31\xdc\x43\xf6\xd5\xb0\xd9\xdc\xde\x29\x22\x3b\xc3\x6f\xf7\x0d\xed\x62\x80\x22\xca\xf0\xb0\x12\xf9\x9f\x8b\xfc\x04\x00\x00\xff\xff\x97\xdb\xcc\x3a\x78\x01\x00\x00")

func artifactsClusterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterServiceYaml,
		"artifacts/cluster-service.yaml",
	)
}

func artifactsClusterServiceYaml() (*asset, error) {
	bytes, err := artifactsClusterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsClusterStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\x31\x70\x83\x8d\x73\x1b\xfa\xa5\x45\xaf\x38\xb7\xee\x21\xeb\xba\x6d\x70\x49\x9d\xb5\xbc\xed\x2d\x52\x9f\x97\xa6\xc6\x36\x11\x89\x54\x49\xca\x89\x2f\xcd\xfd\xf6\x03\x45\xd9\xa6\x64\x39\x4d\x17\xd8\x03\xf6\xfc\xc1\x90\x28\xce\xf0\x99\x87\x33\xc3\x19\x89\x26\xfc\x23\x2a\xcd\xa5\xe8\x00\x4d\x12\xdd\x5c\xb6\x0f\xae\xb9\x08\x3b\x10\x18\x6a\x70\x96\x46\x01\x9a\x83\x18\x0d\x0d\xa9\xa1\x9d\x03\x00\x41\x63\xec\xc0\xdd\x9d\x3f\xe1\x03\x8d\x11\x1a\xd9\xff\xfd\xfd\x01\x80\xbc\x11\xa8\x86\x38\x43\x85\x82\xa1\xb6\x62\x00\x04\x9c\xe2\x8b\x55\xf0\xf3\x79\x2f\x4a\xb5\x41\x95\x3d\x00\xf0\x51\x30\xd5\x88\x57\xfa\x4b\x24\x13\x54\xd4\x48\xd5\x98\x2b\x13\x35\xe6\xdc\x2c\xd2\x69\x83\xc9\xd8\x22\x74\x52\x1b\x24\xde\xca\xf6\x97\xf2\xd0\x0d\xff\x72\xf6\xc6\x8e\xea\x04\x99\x85\xa0\x31\x42\x66\xa4\x72\x70\x62\x6a\xd8\xe2\x9c\x4e\x31\xca\xf1\x59\x18\x49\x59\x9f\x46\xb5\xe4\x0c\x3f\x54\x2c\xa5\x30\x89\x38\xa3\xda\x8d\x07\x09\xb2\xc6\x30\x1f\x72\x13\x0c\xc6\x49\x44\x0d\xe6\xeb\x79\x1c\xda\x5f\x54\x58\xba\x72\x71\x80\x35\x74\xfb\xe3\x82\x9b\x9e\x14\x86\x72\x81\x6a\x23\x48\x72\x1a\xec\x53\x92\x11\xb7\xd1\xc8\x63\x3a\x47\x0f\xdd\x99\xbd\xdf\xd2\x04\xc0\x64\x1c\x53\x11\x6e\x31\x10\x98\x52\xbd\xf0\x6e\x6b\x84\xd5\xbc\xdb\xaf\x9b\x6b\xcb\x8c\x01\x82\xb7\xde\xc8\x13\x78\x87\xc2\x6e\x1a\x42\x06\x24\x23\x0f\x15\xe1\x21\xcc\x94\x8c\x21\x91\x21\x48\x15\x72\x41\x23\xe0\x22\xc4\xdb\x86\x27\x7c\x75\x05\xbf\x2d\xa4\x36\xd6\x9a\xdf\xa0\xfb\x1f\x20\xf5\xab\x16\xf9\xdb\xf8\xc7\xe3\x43\x18\x8f\xe1\xeb\x57\xc0\x5b\x6e\xa0\xed\x89\xe4\xba\xba\x87\x77\x3f\x9d\x06\xef\x27\xc3\xfe\xc5\xe9\xa8\xf7\xfe\xaa\x3d\xbe\xf7\x26\x21\x5b\x48\xb8\xca\xf0\x84\x63\x78\x0d\xcd\x58\x98\x26\x93\x62\xd6\x08\x9b\x1b\x7c\x0d\x26\x66\x05\x43\x4e\xc3\x10\xa8\x00\x39\x9b\x59\x33\x8d\x04\xba\x94\x3c\x04\x85\x99\x48\xb8\xb5\xac\xdb\x82\x25\x8d\x52\x6c\x94\x97\xdc\xce\x38\xac\xd7\xdb\xad\x16\xfc\x08\x87\x39\xe0\xe3\x63\x78\xfd\x58\x20\x3d\x99\xac\xac\x6b\x28\x99\x28\x6e\x99\x75\x12\x30\xe3\x11\x6a\x47\xab\x1d\xe1\x73\x12\xd3\xc4\x02\xc5\x38\x31\xab\x37\x5c\xf9\x80\xf8\xcc\xd2\xbb\x5e\x1e\x08\x7e\x81\x16\x8c\xc7\x2f\xc1\x2c\x50\x78\xf3\x00\x58\xb2\xc5\xe5\x74\x36\x63\x6a\x03\xd5\x02\x2b\x40\xf6\xed\x8d\x34\x7e\x4b\x8b\x8e\xe8\x12\x1f\x52\x32\xe3\x9b\x9b\xa5\x8c\xd2\x18\x2f\x64\x2a\x8c\xf6\x7d\xd3\x39\xba\x15\xf5\xe4\x62\x3b\xed\x92\x9a\x45\xc7\xd7\x5c\x29\xe5\xa0\x7c\x43\xb6\x30\x69\x23\x1d\x49\x81\xd5\xd1\x65\xb3\x53\xf3\xd6\x28\x3a\xa5\xec\x3a\x4d\x3a\x36\xe0\xb5\xf9\xe3\x42\x2c\xb8\xe6\x89\xdd\x37\x87\xc9\x6e\xad\x4d\x2a\x40\x23\x85\x34\x5c\xd9\x20\xd1\x46\x97\x02\x8b\x84\xd0\x5c\x52\xd5\x8c\xf8\xb4\x99\x19\xe1\xfe\x6d\x5c\xfd\xf0\x83\x8b\xab\xd6\xff\x20\x14\x9f\xc0\x10\xb5\x91\x0a\x1d\xe4\xcc\x79\x1d\x6b\x20\x05\xe4\x7e\xf6\xbb\xdc\xf6\xee\xce\x4e\x16\x98\x27\xba\xb7\x4a\xc6\x3f\x39\xc5\xb5\x9a\x9f\xf0\x7e\x0f\x0a\x80\xed\xee\x02\x21\x89\xc2\x84\x2a\x04\x42\x0c\x55\x73\x34\x24\xe4\xaa\x9b\xb3\xea\x26\x35\xf7\x0b\x33\x99\xac\x88\xbd\x7b\xb4\xf8\xdd\x1d\xa0\x08\x77\x6d\x28\xb9\xc1\x06\x39\xd4\x0b\x19\x16\x5a\xc7\x45\x5b\x76\x36\xdb\x8b\xbb\x2c\xdf\x64\xea\xb6\xcc\x24\x0a\x97\x5c\xa6\x1a\x12\x2c\xd2\x22\x18\x35\x40\x88\x42\xb6\x24\x52\x44\x2b\xff\xe8\x22\x87\xf5\xfa\x7a\xdb\x48\xfb\xf8\xb8\xe1\x3d\x83\x67\xcf\x5a\x2f\xe0\x2b\xdc\x4e\xb5\x51\x48\x63\x20\xb7\x40\x7a\x25\xff\x2c\x40\xba\xcc\x19\xb7\xd6\x3a\x8a\x7c\x1c\x8f\xd8\x9c\x6a\xd5\x0f\x67\x19\xcb\xc0\x9e\x4c\xb1\x0f\xa9\x4e\xa7\x6e\x46\xf1\xc1\x23\xf2\x16\x1a\x96\xbb\x40\x29\x7b\x3d\xd6\xaf\xd7\x6b\x28\xe7\xd9\xfb\x52\x9c\xe7\x65\x55\xb8\xed\x2e\x39\xf5\x67\x42\x1b\x2a\x18\x96\x0a\xab\x5d\x77\x64\x7b\xeb\x91\xef\x2c\x45\x50\x2c\x77\x37\xe1\xe2\xd7\xe0\xe7\xf3\xc9\x70\x30\x18\x4d\x2e\x4f\x83\xe0\xd3\x60\xf8\xc6\xc3\x9d\x9d\xbb\x96\x92\x4e\xc1\xc3\x35\x32\x85\xe6\x1f\xb8\x1a\xe2\xac\xf8\xc4\xaf\x18\x33\x14\x41\x36\xb5\x1c\x5c\x00\xd7\xb8\xea\x40\x42\xb5\xbe\x91\x6a\xbb\x19\x89\x54\x55\x9e\x52\x76\x83\x0d\x25\x97\x52\x99\x8e\x75\xf7\xbf\xfe\xa9\x7c\x4e\xa1\x96\xa9\xda\x54\xed\xeb\xc1\x2f\x29\x6a\xa3\x3b\xa5\x73\x3e\xed\xc0\xf3\x56\x2b\x2e\x8c\xc6\x18\x4b\xb5\xea\x40\xfb\xdd\x36\xb5\x44\x7c\x89\x02\xb5\xbe\x54\x72\x8a\xbe\x12\xbc\xdd\x16\xb8\x6b\xfe\xdc\x89\x09\x57\x35\x7b\x52\xd6\x4e\xb2\x13\xf2\x04\x6a\x19\x5a\x1a\xc6\x5c\x40\xc2\xc5\x1c\x48\xf2\xb9\x76\x78\x57\xe1\x23\xf7\x9f\x6b\xb5\xb1\x7f\x8e\x08\x6e\x38\x8d\xde\x60\x44\x57\x01\x32\x29\x42\xdd\x81\x67\x7e\x12\x4c\x50\x71\x19\x6e\x9e\xb5\xfd\x67\x86\xc7\x28\x53\xb3\x79\xf8\xdc\x63\x8a\x86\xfc\x91\x56\x3d\x81\xde\x02\xd9\x35\xdc\x20\x30\x2a\xb2\x09\xa9\x41\xf8\x92\xa2\xe2\xa8\x41\x2e\x51\xc1\xa8\x77\x09\x75\x7d\xcd\x13\x22\xd0\xdc\x48\x75\x6d\xad\xe4\xda\x56\xa1\xa5\x2c\xfe\x30\x47\x40\x16\xd0\x7e\xfa\xa2\xd1\x6a\xb4\x1a\xed\x07\x69\x02\x82\x70\x14\xf4\xcf\xfb\xbd\x11\xb4\x8f\xbe\x4d\xda\xf3\xfd\x9c\x3d\x7d\x80\xb2\x76\x29\x37\x6c\x73\xf6\x77\x56\x53\x7f\xde\x2c\x51\x61\x72\x55\xaa\x78\xf1\x47\x15\x8e\xac\x5c\x02\x1e\x14\xce\xd8\x37\x68\x50\xc5\x5c\x20\x4c\xb9\x88\xe4\x1c\x12\xa9\xb9\xe1\xd2\xb6\x40\xae\xc4\x08\xb3\xf4\x74\x62\xcf\x23\x2a\x56\xbb\x65\x1a\x99\x79\x36\x4e\xb2\x72\x7f\xc2\xc5\x4c\x56\x17\x6c\x4f\xe0\x9f\x46\xd1\xfc\x2c\x5b\xd7\xae\xf3\xbc\x7b\x0c\x81\x42\x42\x95\x75\x3f\xa8\xf5\xde\x9f\x7e\x78\xd7\x87\x8b\xd3\x60\xd4\x1f\xc2\x68\x50\xcb\x62\x66\x55\xd2\x36\x45\x46\x53\x8d\x70\x83\x47\xca\xd5\x44\x36\x76\xb2\x0a\x26\x8b\x36\xae\x8d\x1d\x70\x5d\x48\x31\x5b\x2d\xf7\xe0\x66\x0b\x2a\xe6\x38\x71\x65\xd5\xc4\xc8\x86\xfe\x12\x35\x78\xd9\x8c\xb3\xb9\xb0\xa5\xa4\xa7\xc2\x11\xe8\x74\x70\x01\x66\xc1\x35\x30\xaa\x11\xea\xdc\x1c\x69\x48\x35\x46\xa8\x75\x29\xa0\x55\x5c\x22\xd0\xd3\x52\xe8\xb4\xaa\xc8\xf6\x57\xdc\xc3\xf6\xa7\x02\x2f\x21\x57\xc8\x4c\xb4\x72\x04\xe5\x25\x2f\x5c\x52\xa5\x77\xf6\xbf\x08\xd3\x76\x06\xb6\xee\xab\x5e\x3c\xeb\x15\xfe\x55\x6f\xfc\xe5\xef\xc7\x57\x57\x1d\x9d\x50\x86\x9d\xf1\xf8\xc7\x6c\x60\x6f\xe7\x90\xd9\xfe\x4d\xc3\xf3\xa6\x7a\xc7\x1b\xf2\xab\xc9\xf9\xe0\xdd\xe4\xed\xd9\x79\xbf\x7b\xb4\xdb\x81\x1c\x9d\x7c\x2e\x45\xae\xfd\x79\x82\x97\x83\xa0\xdc\xb8\x3c\x1d\xdf\xd7\xe0\xf5\x23\x7c\x60\xc6\x8b\x81\xe4\xb2\x3c\x9f\xd9\x44\x2f\x10\x43\xdb\x92\x33\x19\x27\x11\x1a\x04\x9a\x57\xeb\xd3\x15\x68\x63\x1d\x5c\xcc\xd7\x6f\x91\xca\x5c\x6f\xf6\x79\x0f\x84\xea\x8d\x76\x24\x7d\xa2\x3c\x53\x3d\x93\xca\xd5\x05\x19\x8a\x29\x82\x0b\xb3\x3a\x65\x0c\x93\x6c\x06\x93\x42\x20\xb3\x6b\xeb\xe3\x5a\x41\x53\x2a\x0c\x8f\xa0\xf2\x38\xd9\x73\x9a\x64\x87\x49\x6d\x7d\x98\xd4\x5e\x42\x28\x41\x47\x88\x09\xb4\xed\xb5\xc0\x83\x0a\xa8\x67\xee\x94\xe1\xff\x2e\x51\x91\xbf\xd9\xc8\xd8\x5a\xbb\x62\xad\x1c\x7a\xc2\xc5\x95\xcd\x50\xeb\x44\x9a\x55\xc0\x54\x99\x13\xa0\xc6\x60\x9c\x18\x17\x7f\xd4\x90\x58\x6a\x43\xa4\xad\x69\xcb\xe1\xbf\x8f\xe1\xca\x71\xa9\xf8\xbc\xa8\xe0\xbb\x28\x7a\xf5\xaa\x3f\x78\xeb\xc9\x1f\xd6\x5f\xed\x5d\xe6\xf8\xe4\xa0\xc2\x61\xdf\x0f\x82\x51\xf7\xc8\x6f\xb6\x5a\x7e\x7b\x75\x54\x29\xf4\x4b\xd0\x1f\x76\x8f\x94\x94\xa6\xfa\xf9\x1a\xa1\x0d\x9f\x2a\xe0\xd5\x52\xbd\xc1\x87\x0f\xfd\xde\x68\x32\xec\x8f\x86\xbf\x76\xdb\xad\x97\xde\xa4\x60\x74\x3a\x1c\x41\x70\x7e\xfa\xb1\xef\x0f\x17\xad\x2f\x07\x4f\x60\xb7\x0e\x68\xfe\xee\xcc\x3a\xad\xb6\xdd\x86\xcb\x0c\x1a\x6e\x16\x28\xd6\x95\x28\x86\x36\x8a\x6c\x53\x5a\x78\xd9\x61\xeb\xaa\x75\x6b\x1a\x71\x6d\x50\x00\x21\xd7\x88\x09\x91\x49\x76\x6d\x15\xba\x7e\x95\x90\x98\xde\x12\x1b\x01\xba\xdb\x76\x5d\x29\x61\x50\x4c\x15\xb5\x42\x77\xb9\xb9\xc8\x4e\x09\x92\xe5\x5b\x42\x5c\x1b\xdb\xdd\xf6\xb3\x64\x21\xb5\xe9\x7a\xee\x40\x52\x8d\xaa\x6b\xd9\xb7\x2d\x6a\x5e\x30\x74\x1f\x28\x5e\xff\xaf\xfb\x85\xf6\xde\x7e\xa1\xd5\xba\x58\x77\x0c\xce\xf0\x9d\xa6\xb2\x80\x6f\xfd\xa6\xb3\x03\x77\xf7\x15\xf3\x4a\x6f\xfb\xdc\xd0\x05\x4d\x7c\x48\xbb\x1d\xdc\xe3\x3a\xee\x7d\xfd\x76\x82\x4a\x67\x5e\x67\x3e\x66\x06\xf4\x22\xca\x0b\x85\x27\xb3\x03\x9b\x8f\x09\x97\x1f\x7b\xee\xcb\x49\xa9\xeb\x76\x65\x27\x5b\x60\x98\x46\x5e\x97\xec\x37\xdf\xcb\xad\xfe\x51\xfe\x99\x21\x63\x8b\xec\x7c\x67\xd8\xf1\x95\xef\xfe\xf0\x60\xcf\x0b\xad\x2f\x64\x88\xda\x76\x1c\x43\xa4\xe1\x27\xc5\x0d\x0e\x04\xc3\x4d\xcf\x50\xe1\x06\x55\x4e\x60\xf9\x2a\xbe\x0a\x08\xdc\x88\x5d\xf8\xbf\x01\x00\x00\xff\xff\x37\x96\xfe\xda\x8d\x1a\x00\x00")

func artifactsClusterStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsClusterStatefulsetYaml,
		"artifacts/cluster-statefulset.yaml",
	)
}

func artifactsClusterStatefulsetYaml() (*asset, error) {
	bytes, err := artifactsClusterStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/cluster-statefulset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"artifacts/backupinstance-crd.yaml":        artifactsBackupinstanceCrdYaml,
	"artifacts/backupinstance-job-create.yaml": artifactsBackupinstanceJobCreateYaml,
	"artifacts/backupinstance-job-delete.yaml": artifactsBackupinstanceJobDeleteYaml,
	"artifacts/backupschedule-crd.yaml":        artifactsBackupscheduleCrdYaml,
	"artifacts/backupschedule-cronjob.yaml":    artifactsBackupscheduleCronjobYaml,
	"artifacts/backupschedule-pvc.yaml":        artifactsBackupschedulePvcYaml,
	"artifacts/cluster-configmap.yaml":         artifactsClusterConfigmapYaml,
	"artifacts/cluster-crd.yaml":               artifactsClusterCrdYaml,
	"artifacts/cluster-service-read.yaml":      artifactsClusterServiceReadYaml,
	"artifacts/cluster-service.yaml":           artifactsClusterServiceYaml,
	"artifacts/cluster-statefulset.yaml":       artifactsClusterStatefulsetYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"artifacts": {nil, map[string]*bintree{
		"backupinstance-crd.yaml":        {artifactsBackupinstanceCrdYaml, map[string]*bintree{}},
		"backupinstance-job-create.yaml": {artifactsBackupinstanceJobCreateYaml, map[string]*bintree{}},
		"backupinstance-job-delete.yaml": {artifactsBackupinstanceJobDeleteYaml, map[string]*bintree{}},
		"backupschedule-crd.yaml":        {artifactsBackupscheduleCrdYaml, map[string]*bintree{}},
		"backupschedule-cronjob.yaml":    {artifactsBackupscheduleCronjobYaml, map[string]*bintree{}},
		"backupschedule-pvc.yaml":        {artifactsBackupschedulePvcYaml, map[string]*bintree{}},
		"cluster-configmap.yaml":         {artifactsClusterConfigmapYaml, map[string]*bintree{}},
		"cluster-crd.yaml":               {artifactsClusterCrdYaml, map[string]*bintree{}},
		"cluster-service-read.yaml":      {artifactsClusterServiceReadYaml, map[string]*bintree{}},
		"cluster-service.yaml":           {artifactsClusterServiceYaml, map[string]*bintree{}},
		"cluster-statefulset.yaml":       {artifactsClusterStatefulsetYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
