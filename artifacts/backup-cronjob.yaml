apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Name }}-job
  ownerReferences:
    - kind: MySQLCluster
      apiVersion: cr.mysqloperator.grtl.github.com/v1
      name: {{ .Spec.Cluster }}
      uid: {{ .UID }}
spec:
  schedule: "{{ .Spec.Time }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: grtl/xtrabackup:latest
            command:
            - bash
            - "-c"
            - |
              set -ex
              # Clone data from master.
              ncat --recv-only {{ .Spec.Cluster }}-0.{{ .Spec.Cluster }} 3307 | xbstream -x -C /var/lib/mysql
              # Prepare the backup.
              xtrabackup --prepare --target-dir=/var/lib/mysql


              cd /var/lib/mysql

              # Determine binlog position of cloned data, if any.
              if [[ -f xtrabackup_slave_info ]]; then
                # XtraBackup already generated a partial "CHANGE MASTER TO" query
                # because we're cloning from an existing slave.
                mv xtrabackup_slave_info change_master_to.sql.in
                # Ignore xtrabackup_binlog_info in this case (it's useless).
                rm -f xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # We're cloning directly from master. Parse binlog position.
                [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                rm xtrabackup_binlog_info
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi

              # Check if we need to complete a clone by starting replication.
              if [[ -f change_master_to.sql.in ]]; then
                echo "Waiting for mysqld to be ready (accepting connections)"
                until mysql -h 127.0.0.1 -p"${MYSQL_ROOT_PASSWORD}" -e "SELECT 1"; do sleep 1; done

                echo "Initializing replication from clone position"
                # In case of container restart, attempt this at-most-once.
                mv change_master_to.sql.in change_master_to.sql.orig
                mysql -h 127.0.0.1 -p"${MYSQL_ROOT_PASSWORD}" <<EOF
              $(<change_master_to.sql.orig),
                MASTER_HOST='{{ .Name }}-0.{{ .Name }}',
                MASTER_USER='root',
                MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}',
                MASTER_CONNECT_RETRY=10;
              START SLAVE;
              EOF
              fi

              xtrabackup --backup --slave-info --stream=xbstream --target-dir=/data/backups/mysql/\"{{ .Name }}.cnf\" --host=127.0.0.1 --user=root --password=password
          restartPolicy: OnFailure
          startingDeadlineSeconds: 30
          volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
            subPath: mysql
          - name: {{ .Name }}
            mountPath: /data/backups/mysql
          volumes:
          - name: {{ .Name }}
            persistentVolumeClaim:
            claimName: {{ .Name }}
